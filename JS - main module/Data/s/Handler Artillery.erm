ZVSE2


; Модуль хендлит все бонусы баллисте воедино (из модуля Emerald тоже)


!?FU(js_CalcTotalBallistaDmg);
!#VA(hero:x) (minDmg:x) (maxDmg:x) (totalMinDmg:x) (totalMaxDmg:x);

; Инициализируем все бонусы
!!FU(js_HotaArtillery)&i^js_hota_artillery^:P?(hotaAttackBonus:y);
*!FU(js_BonusBallistics)&i^js_ballistics_bonus^:P(hero)/?(ballisticsAttackBonus:y);
!!FU(js_BonusTreebornQuiver)&i^js_treeborn_quiver^:P(hero)/?(treebornQuiverAttackBonus:y);
!!FU(js_BonusRingOfMachineAffinity)&i^js_ring_of_machine_affinity^:P(hero)/?(ringOfMachineAffinityAttackBonus:y);
; Считаем итоговую атаку - cтандартный бонус к атаке героя +1 + бонусы
!!UN:C(hero)/1142/1/?(heroAttack:y); 0x476
!!VR(heroAttack):F0/252; // clamp
!!VR(totalHeroAttack:y):S(heroAttack) +1 +(hotaAttackBonus) +(treebornQuiverAttackBonus) +(ringOfMachineAffinityAttackBonus); +(ballisticsAttackBonus) 
!!VR(totalHeroAttack):F0/252; // clamp
; Считаем итоговый урон
!!VR(totalMinDmg):S(minDmg) *(totalHeroAttack);
!!VR(totalMaxDmg):S(maxDmg) *(totalHeroAttack);


!?FU(js_OnBeforeShoot_CalcBallistaDmg);
!!UN:Cx1/(STRUCT_HOOK_CONTEXT_ECX)/4/?(monPtr:y); 
!!UN:C(monPtr)/208/4/?(minDmg:y); D0
!!UN:C(monPtr)/212/4/?(maxDmg:y); D4

!!UN:Cx1/(STRUCT_HOOK_CONTEXT_EAX)/4/?(hero:y);

!!FU(js_CalcTotalBallistaDmg):P(hero)/(minDmg)/(maxDmg)/?(totalMinDmg:y)/?(totalMaxDmg:y);
; Наполняем регистры для выполнения после прыжка
!!UN:Cx1/(STRUCT_HOOK_CONTEXT_ESI)/4/(totalMinDmg);
!!UN:Cx1/(STRUCT_HOOK_CONTEXT_EBX)/4/(totalMaxDmg);
; Прыгаем до следующего блока функции
!!SN:X?y99/0;
!!UN:Cx1/(STRUCT_HOOK_CONTEXT_RET)/4/4468580; 00442F64


!?FU(js_OnBeforeHint_CalcBallistaDmg);
!!UN:Cx1/(STRUCT_HOOK_CONTEXT_ESI)/4/?(monPtr:y);
!!UN:C(monPtr)/208/4/?(minDmg:y); D0
!!UN:C(monPtr)/212/4/?(maxDmg:y); D4

!!SN:E4465584/(CALLCONV_THISCALL)/(monPtr); 4423B0 BattleStack::GetOwnerHero, returns hero unto v1

!!FU(js_CalcTotalBallistaDmg):Pv1/(minDmg)/(maxDmg)/?(totalMinDmg:y)/?(totalMaxDmg:y);
; Наполняем регистры для выполнения после прыжка
!!UN:Cx1/(STRUCT_HOOK_CONTEXT_EDI)/4/(totalMinDmg);
!!UN:Cx1/(STRUCT_HOOK_CONTEXT_EBX)/4/(totalMaxDmg);
; Прыгаем до следующего блока функции
!!SN:X?y99/0;
!!UN:Cx1/(STRUCT_HOOK_CONTEXT_RET)/4/4796449; 00493021


!?FU(js_OnBeforeDlg_CalcBallistaDmg);
!!UN:Cx1/(STRUCT_HOOK_CONTEXT_EBP)/4/?(ebp:y) C(ebp)/8/4/?(crInfoPtr:y);
!!UN:C(crInfoPtr)/92/4/?(minDmg:y); 5C
!!UN:C(crInfoPtr)/96/4/?(maxDmg:y); 60

!!UN:Cx1/(STRUCT_HOOK_CONTEXT_ECX)/4/?(hero:y);

!!FU(js_CalcTotalBallistaDmg):P(hero)/(minDmg)/(maxDmg)/?(totalMinDmg:y)/?(totalMaxDmg:y);
; Наполняем регистры для выполнения после прыжка
!!UN:Cx1/(STRUCT_HOOK_CONTEXT_EDX)/4/(totalMinDmg);
!!UN:Cx1/(STRUCT_HOOK_CONTEXT_EAX)/4/(totalMaxDmg);
; Прыгаем до следующего блока функции
!!SN:X?y99/0;
!!UN:Cx1/(STRUCT_HOOK_CONTEXT_RET)/4/6249714; 005F5CF2


!?FU(js_HotaArtillery);
!#VA(bonus:x);

!!VR(bonus):S4;
