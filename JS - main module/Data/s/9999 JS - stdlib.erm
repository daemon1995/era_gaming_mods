ZVSE2


***************************************************************************************** Get hex
!?FU(js_GetHexByHexId);
!#VA(hexId:x) (hexPtr:x);

!!UN:C(COMBAT_MANAGER)/(UNC_INT)/?(cmbMgr:y);

; ptr2 = (int)BattleMrg + 112 * gex_id;
!!VR(hexOffset:y):S(hexId) *112; 112 = _BattleHex_ SIZEOF
!!VR(hexPtr):S(cmbMgr) +(hexOffset);
; v5 = (_BattleHex_ *)(ptr2 + 452);
!!VR(hexPtr): +452; 1C4


***************************************************************************************** Get stack
; Get not destroyed (killed) stack
!?FU(js_GetStackByHexId);
!#VA(hexId:x) (stackPtr:x);

!!FU(js_GetHexByHexId):P(hexId)/?(hexPtr:y);
!!UN:C(hexPtr)/24/1/?(stackSide:y); 18

// If stack is alive
!!if&(stackSide)>=0;
  !!SN:E5141040/(CALLCONV_THISCALL)/(hexPtr); 004E7230 BattleHex::GetStack
  !!VR(stackPtr):Sv1;
!!en;


!?FU(js_GetDeadStackByHexId);
!#VA(hexId:x) (stackPtr:x);

!!FU(js_GetHexByHexId):P(hexId)/?(hexPtr:y);
!!UN:C(hexPtr)/24/1/?(stackSide:y); 18
!!FU&(stackSide)>=0:E;

; if ( (*(_BYTE *)(ptr2 + 468) & 2) != 0 )      // 16= 0x10 offset = char ObstacleBits
;     return 0;
!!UN:C(hexPtr)/16/1/?(obstacleBits:y);
!!VR(obstacleBits): &2;
;!IF:L^obstacleBits= %(obstacleBits)^;
!!FU&(obstacleBits)<>0:E;

; v8 = *(_DWORD *)(ptr2 + 480) - 1;             // 28= 0x1C offset = int DeadStacksCount
!!UN:C(hexPtr)/28/4/?(deadStacksCount:y);
;!IF:L^deadStacksCount= %(deadStacksCount)^;
!!VR(deadStacksCount): -1;
; if ( v8 < 0 )
;   return 0;
!!FU&(deadStacksCount)<0:E;

; while ( 1 )
; {
;   v9 = v5->DeadStackSide[v8];
!!VR(offset:y):S32; DeadStackSide 0x20 char[14]
!!VR(offset): +(deadStacksCount);
!!UN:C(hexPtr)/(offset)/1/?(side:y);

; v10 = &BM->stacks[v9][v5->DeadStackIndex[v8]];
!!VR(offset:y):S46; DeadStackIndex 0x2E char[14]
!!VR(offset): +(deadStacksCount);
!!UN:C(hexPtr)/(offset)/1/?(index:y);

!!VR(index)&(side)>0: +(BATTLE_STACKS_PER_SIDE);
!!BM(index):Z?(stackPtr);


***************************************************************************************** Get stack number
!?FU(js_GetStackNumberByStackPtr);
!#VA(stackPtr:x) (stackNumber:x);

!!FU(js_GetActualStackSideByStackPtr):P(stackPtr)/?(side:y);
!!UN:C(stackPtr)/248/4/?(stackNumber); 0xF8
!!VR(stackNumber)&(side): +(BATTLE_STACKS_PER_SIDE);


***************************************************************************************** Get side
; The stack side would be reverted if the stack is hypnotized
!?FU(js_GetActualStackSideByStackPtr);
!#VA(stackPtr:x) (side:x);

!!UN:C(stackPtr)/244/4/?(side); 0xF4
!!UN:C(stackPtr)/648/4/?(isHypnotized:y); 0x288
!!VR(side)&(isHypnotized):X(TRUE);


!?FU(js_GetActualStackSide);
!#VA(stackNum:x) (side:x);

!!BM(stackNum):I?(side) G(SPELL_HYPNOTIZE)/?(hypnotizeTurns:y)/d;
!!VR(side)&(hypnotizeTurns)>0:X(TRUE);


***************************************************************************************** Get hero
!?FU(js_GetHeroByStackPtr);
!#VA(stackPtr:x) (heroPtr:x);

!!VR(savedV1:y):Sv1;
!!SN:E4465584/(CALLCONV_THISCALL)/(stackPtr); 004423B0 BattleStack::GetOwnerHero
!!VR(heroPtr):Sv1;
!!VRv1:S(savedV1:y);


***************************************************************************************** Get Sec Skill Values
!?FU(js_GetSecSkillValue);
!#VA(skillId:x) (skillLvl:x) (skillValue:x) (typeValue:x);
; typeValue = 0 - integer
; typeValue = 1 - percent (float*100)

!!FU|(skillLvl)<=0/(skillLvl)>3:E;

!!FU&(skillId)=0:E;                                                              // Pathfinding

!!FU(js_GetSecSkillValuePercent)&(skillId)=1:P6547944/(skillLvl)/?(skillValue);  // Shooting
!!VR(typeValue)&(skillId)=1:S1;

!!FU(js_GetSecSkillValuePercent)&(skillId)=2:P6548072/(skillLvl)/?(skillValue);  // Logistics
!!VR(typeValue)&(skillId)=2:S1;

!!FU(js_GetSecSkillValueInteger)&(skillId)=3:P6547928/(skillLvl)/?(skillValue);  // Scouting
!!VR(typeValue)&(skillId)=3:S0;

!!FU(js_GetSecSkillValuePercent)&(skillId)=4:P6548024/(skillLvl)/?(skillValue);  // Diplomacy
!!VR(typeValue)&(skillId)=4:S1;

!!FU&(skillId)=5:E;                                                              // Navigation

!!FU(js_GetSecSkillValueInteger)&(skillId)=6:P6547880/(skillLvl)/?(skillValue);  // Leadership
!!VR(typeValue)&(skillId)=6:S0;

!!FU&(skillId)=7:E;                                                              // Wisdom

!!FU(js_GetSecSkillValueInteger)&(skillId)=8:P6547912/(skillLvl)/?(skillValue);  // Mysticism
!!VR(typeValue)&(skillId)=8:S0;

!!FU(js_GetSecSkillValueInteger)&(skillId)=9:P6547864/(skillLvl)/?(skillValue);  // Luck
!!VR(typeValue)&(skillId)=9:S0;

!!FU&(skillId)=10:E;                                                             // Ballistics

!!FU(js_GetSecSkillValuePercent)&(skillId)=11:P6548008/(skillLvl)/?(skillValue); // Eagle Eye
!!VR(typeValue)&(skillId)=11:S1;

!!FU(js_GetSecSkillValuePercent)&(skillId)=12:P6547896/(skillLvl)/?(skillValue); // Necromancy
!!VR(typeValue)&(skillId)=12:S1; 

!!FU(js_GetSecSkillValueInteger)&(skillId)=13:P6547992/(skillLvl)/?(skillValue); // Estates
!!VR(typeValue)&(skillId)=13:S0;

!!FU&(skillId)=14:E;                                                             // Fire Magic

!!FU&(skillId)=15:E;                                                             // Wind Magic

!!FU&(skillId)=16:E;                                                             // Water Magic

!!FU&(skillId)=17:E;                                                             // Earth Magic

!!FU&(skillId)=18:E;                                                             // Scholar

!!FU&(skillId)=19:E;                                                             // Tactics

!!FU&(skillId)=20:E;                                                             // Artillery

!!FU(js_GetSecSkillValuePercent)&(skillId)=21:P6548056/(skillLvl)/?(skillValue); // Learning
!!VR(typeValue)&(skillId)=21:S1;

!!FU(js_GetSecSkillValuePercent)&(skillId)=22:P6547960/(skillLvl)/?(skillValue); // Offence
!!VR(typeValue)&(skillId)=22:S1;

!!FU(js_GetSecSkillValuePercent)&(skillId)=23:P6547976/(skillLvl)/?(skillValue); // Defence
!!VR(typeValue)&(skillId)=23:S1;

!!FU(js_GetSecSkillValuePercent)&(skillId)=24:P6548104/(skillLvl)/?(skillValue); // Intelligence 63EA88
!!VR(typeValue)&(skillId)=24:S1; 

!!FU(js_GetSecSkillValuePercent)&(skillId)=25:P6548088/(skillLvl)/?(skillValue); // Sorcery
!!VR(typeValue)&(skillId)=25:S1;

!!FU(js_GetSecSkillValuePercent)&(skillId)=26:P6548040/(skillLvl)/?(skillValue); // Resistance
!!VR(typeValue)&(skillId)=26:S1;

!!FU(js_GetSecSkillValuePercent)&(skillId)=27:P6548120/(skillLvl)/?(skillValue); // First Aid 63EA98 // 0.0/1.0/2.0/3.0, после расчета возврат 1/2/3/4 (+0.05*lvl если спец) где верхнее кол-во хила = 25 * value 
!!VR(typeValue)&(skillId)=27:S1;                                                 // FirstAidPower = (__int64)(Hero_GetFirstAidPower(hero) * 25.0);



!?FU(js_GetSecSkillValuePercent);
!#VA(basicAddr:x) (skillLvl:x) (skillPercentValue:x);

!!VR(addr:y):S(skillLvl) *4 +(basicAddr);                 // Calculate skill address
!!UN:C(addr)/4/?(skillFloatValue:e);
!!VR(skillPercentValueFloat:e):S(skillFloatValue) *100;
!!VR(skillPercentValue):S(skillPercentValueFloat);


!?FU(js_GetSecSkillValueInteger);
!#VA(basicAddr:x) (skillLvl:x) (skillIntegerValue:x);

!!VR(addr:y):S(skillLvl) *4 +(basicAddr);                 // Calculate skill address
!!UN:C(addr)/4/?(skillValue:y);
!!VR(skillIntegerValue):S(skillValue);


***************************************************************************************** Set Sec Skill Values
!?FU(gem_SetSecSkillValue);
!#VA(skillId:x) (skillLvl:x) (skillValue:x);

!!FU|(skillLvl)<=0/(skillLvl)>3:E;

!!FU&(skillId)=0:E;                                                              // Pathfinding
!!FU(gem_SetSecSkillValuePercent)&(skillId)=1:P6547944/(skillLvl)/(skillValue);  // Shooting
!!FU(gem_SetSecSkillValuePercent)&(skillId)=2:P6548072/(skillLvl)/(skillValue);  // Logistics
!!FU(gem_SetSecSkillValueInteger)&(skillId)=3:P6547928/(skillLvl)/(skillValue);  // Scouting
!!FU(gem_SetSecSkillValuePercent)&(skillId)=4:P6548024/(skillLvl)/(skillValue);  // Diplomacy
!!FU&(skillId)=5:E;                                                              // Navigation
!!FU(gem_SetSecSkillValueInteger)&(skillId)=6:P6547880/(skillLvl)/(skillValue);  // Leadership
!!FU&(skillId)=7:E;                                                              // Wisdom
!!FU(gem_SetSecSkillValueInteger)&(skillId)=8:P6547912/(skillLvl)/(skillValue);  // Mysticism
!!FU(gem_SetSecSkillValueInteger)&(skillId)=9:P6547864/(skillLvl)/(skillValue);  // Luck
!!FU&(skillId)=10:E;                                                             // Ballistics
!!FU(gem_SetSecSkillValuePercent)&(skillId)=11:P6548008/(skillLvl)/(skillValue); // Eagle Eye
!!FU(gem_SetSecSkillValuePercent)&(skillId)=12:P6547896/(skillLvl)/(skillValue); // Necromancy 
!!FU(gem_SetSecSkillValueInteger)&(skillId)=13:P6547992/(skillLvl)/(skillValue); // Estates
!!FU&(skillId)=14:E;                                                             // Fire Magic
!!FU&(skillId)=15:E;                                                             // Wind Magic
!!FU&(skillId)=16:E;                                                             // Water Magic
!!FU&(skillId)=17:E;                                                             // Earth Magic
!!FU&(skillId)=18:E;                                                             // Scholar
!!FU&(skillId)=19:E;                                                             // Tactics
!!FU&(skillId)=20:E;                                                             // Artillery
!!FU(gem_SetSecSkillValuePercent)&(skillId)=21:P6548056/(skillLvl)/(skillValue); // Learning 63EA58
!!FU(gem_SetSecSkillValuePercent)&(skillId)=22:P6547960/(skillLvl)/(skillValue); // Offence
!!FU(gem_SetSecSkillValuePercent)&(skillId)=23:P6547976/(skillLvl)/(skillValue); // Defence
!!FU(gem_SetSecSkillValuePercent)&(skillId)=24:P6548104/(skillLvl)/(skillValue); // Intelligence 
!!FU(gem_SetSecSkillValuePercent)&(skillId)=25:P6548088/(skillLvl)/(skillValue); // Sorcery
!!FU(gem_SetSecSkillValuePercent)&(skillId)=26:P6548040/(skillLvl)/(skillValue); // Resistance 63EA48
!!FU&(skillId)=27:E;                                                             // First Aid


!?FU(gem_SetSecSkillValuePercent);                        // Set a new percent value for a secondary skill
!#VA(basicAddr:x) (skillLvl:x) (skillPercentValue:x);

!!VR(addr:y):S(skillLvl) *4 +(basicAddr);                 // Calculate skill address
!!VR(skillValue:e):S(skillPercentValue) :100; 
!!SN:X?(addr2:y) X(skillValue) X?(addr3:y) X(addr2);      // Convert to percent
!!UN:C(addr)/4/(addr3);                                   // Replace with new value


!?FU(gem_SetSecSkillValueInteger);                        // Set a new integer value for a secondary skill
!#VA(basicAddr:x) (skillLvl:x) (skillIntegerValue:x);

!!VR(addr:y):S(skillLvl) *4 +(basicAddr);                 // Calculate skill address
!!UN:C(addr)/4/(skillIntegerValue);                       // Replace with new value



***************************************************************************************** Get Object Name
!?FU(gem_GetObjectName);
!#VA(objType:x) (objNameInt:x);

!!VR(objNameAddr:y):S4 *(objType) +6978132; 006A7A54
!!UN:C(objNameAddr)/4/?(objNameIn:y);
!!SN:B(objNameIn)/d/?(objName:z);
!!VR(objNameInt):Z(objName);

*** Пример работы с текстовым буфером ***
; H3String objName = RMGObjectInfo::GetObjectName(mapItem);
*!VR(objNameAddr:y):S4 *(objType) +6978132; 006A7A54
*!UN:C(objNameAddr)/4/?(objNameInt:y);
*!SN:B(objNameInt)/d/?(objName:z);
*!VR(objName): +(addHint);
; sprintf(h3_TextBuffer, "%s", objName.String());
*!SN:B(ADDR_TEXT_BUFFER)/d/(objName);
; c->edi = (int)h3_TextBuffer;
*!UN:Cx1/(STRUCT_HOOK_CONTEXT_EDI)/4/(ADDR_TEXT_BUFFER);

; c->return_address = h->GetAddress() + 7;
; return NO_EXEC_DEFAULT;
*!SN:X?y99/0;
*!UN:Cx1/(STRUCT_HOOK_CONTEXT_RET)/4/4247641;

***************************************************************************************** Get and Set Building Name

!?FU(gem_GetSpecBuilduingName);
!#VA(buildId:x) (name:x);

!!VR(offset:y):S(buildId) *(SIZEOF_PTR);
!!UN:C6968380/(offset)/(SIZEOF_PTR)/?(builNamePtr:y);
!!SN:B(builNamePtr:y)/d/?s^temp^;
!!VR(name):Zs^temp^;
!!SN:W^temp^;


!?FU(gem_SetSpecBuilduingName);
!#VA(buildId:x) (name:x);

!!VR(offset:y):S(buildId) *(SIZEOF_PTR);
!!UN:C6968380/(offset)/(SIZEOF_PTR)/?(builNamePtr:y);
!!SN:B(builNamePtr:y)/d/z(name);


!?FU(gem_GetSpecBuilduingDesc);
!#VA(buildId:x) (desc:x);

!!VR(offset:y):S(buildId) *(SIZEOF_PTR);
!!UN:C6977652/(offset)/(SIZEOF_PTR)/?(buildDescPtr:y);
!!SN:B(buildDescPtr:y)/d/?s^temp^;
!!VR(desc):Zs^temp^;
!!SN:W^temp^;


!?FU(gem_SetSpecBuilduingDesc);
!#VA(buildId:x) (desc:x);

!!VR(offset:y):S(buildId) *(SIZEOF_PTR);
!!UN:C6977652/(offset)/(SIZEOF_PTR)/?(buildDescPtr:y);
!!SN:B(buildDescPtr:y)/d/z(desc);


***************************************************************************************** Spell Table
; struct _Spell
; int Eff_Power // 0x30 // множитель к колдовской силе героя у боевого спелла
; int Effect[4] //      // базовая часть урона у боевого спелла. (сила дебафа)/(100-сила бафа)/(множитель суммона) у небоевого
;               // 0x34 // без скилла
;               // 0x38 // базовый скилл
;               // 0x3C // продв. скилл
;               // 0x40 // эксп. скилл

!?FU(js_GetSpellAttr);
!#VA(spellNum:x) (attrOffset:x) (attrSize:x) (attrValue:x);

!!VR(spellTablePtr:y):S6848424; 00687FA8
!!UN:C(spellTablePtr)/4/?(spellTable:y); 
!!VR(spellStructSize:y):S136; // _Spell_
!!VR(offsetSpellStruct:y):S(spellStructSize) *(spellNum);
!!VR(totalOffset:y):S(offsetSpellStruct) +(attrOffset);
!!UN:C(spellTable)/(totalOffset)/(attrSize)/?(attrValue);
;!IF:L^attrValue= %(attrValue)^;


!?FU(js_SetSpellAttr);
!#VA(spellNum:x) (attrOffset:x) (attrSize:x) (attrValue:x);

!!VR(spellTablePtr:y):S6848424; 00687FA8
!!UN:C(spellTablePtr)/4/?(spellTable:y); 
!!VR(spellStructSize:y):S136; // _Spell_
!!VR(offsetSpellStruct:y):S(spellStructSize) *(spellNum);
!!VR(totalOffset:y):S(offsetSpellStruct) +(attrOffset);
!!UN:C(spellTable)/(totalOffset)/(attrSize)/(attrValue);
;!IF:L^attrValue= %(attrValue)^;


***************************************************************************************** (deprecated) CrInfo Table = то же, что и MA
*?FU(js_SetMonAttr);
*#VA(monNum:x) (attrOffset:x) (attrSize:x) (attrValue:x);

*!VR(monTablePtr:y):S6768560; 006747B0
*!UN:C(monTablePtr)/4/?(monTable:y);
*!VR(monStructSize:y):S116; // _MonType_ 0x74
*!VR(offsetMonStruct:y):S(monStructSize) *(monNum);
*!VR(totalOffset:y):S(offsetMonStruct) +(attrOffset);
*!UN:C(monTable)/(totalOffset)/(attrSize)/(attrValue);

*****************************************************************************************
// Распаковка mixedPosition (она вроде должна быть в какой-то либе?!)
*!UN:Cx1/(STRUCT_HOOK_CONTEXT_EBP)/4/?(ebp:y) C(ebp)/8/4/?(pos:y);
*!IF:M^pos= %(pos)^;

; x = coord & 0x3FF;
*!VR(x:y):S(pos) & 1023;
*!IF:M^x= %(x)^;
; y = (coord >> 16) & 0x3FF;
*!VR(y:y):S(pos) Sd>>16;
*!VR(y): & 1023;
*!IF:M^y= %(y)^;
; z = (coord >> 26) & 1;
*!VR(z:y):S(pos) Sd>>26;
*!VR(z): & 1;
*!IF:M^z= %(z)^;

*!OB(x)/(y)/(z):T?(objType:y) U?(objSubtype:y);
*!IF:M^objType= %(objType), objSubtype= %(objSubtype)^;

// Получение advMgr и использование
*!UN:C(ADV_MANAGER)/4/?(advMgr:y);
*!SN:E4447296/(CALLCONV_THISCALL)/(stack)/(hero[side])/(armyPtr[side])/(town)/(hero[oppSide])/(armyPtr[oppSide])/(ground);         [recalc luck and morale for stack only]
// Получение mapItem по координатам
*!FU(WOG_AdvMgr_GetMapItem):P(x)/(y)/(z)/?(mapItem:y);


***************************************************************************************** Work with strings
!?FU(js_StringReplaceINT);
// Replace ints with an array of strings 
!#VA(string:x) (result:x) (substr[10]:x);

; get len(arr)
!!re i/0/9;
  !!if&(substr[i])=0;
    !!VR(argsNum:y):Si;
    !!br;
  !!en;
!!en;

!!VR(jsTemp:z):Sz(string);
!!SN:K(jsTemp)/?(length:y);

!!VR(strCounter:y):S0;
!!VR(jsSubstring:z):S^^;
!!VR(jsNewString:z):S^^;

!!re i/0/(length)/1/-1;
  !!SN:K(jsTemp)/i/?(char:z);
  !!if&(char)<>^0^;
    !!VR(int:y):V(char);
    !!VR(jsSubstring):+(char);

    !!if&(int)>0;
      !!FU(StringReplaceINT)&(strCounter)<(argsNum):P(jsSubstring)/(substr[strCounter])/?(jsSubstring);
      !!VR(strCounter):+1;
    !!en;

    !!VR(jsNewString):+(jsSubstring);
    !!VR(jsSubstring):S^^;
  !!en;
!!en;

!!VR(result):Z(jsNewString);


!?FU(js_FindSubstringInString);
// Return the lowest index in string where substring is found
// Return -1 if not found
!#VA(stringInt:x) (substrInt:x) (result:x);

!!VR(string:z):Sz(stringInt);
!!SN:K(string)/?(length:y);

!!VR(substr:z):Sz(substrInt);
!!SN:K(substr)/?(subLength:y);

!!VR(result):S-1;

!!VRj:S0;

!!re i/0/(length)/1/-1;
  !!SN:K(string)/i/?(char:z);
  !!SN:K(substr)/j/?(subChar:z);

  !!if&(char)=(subChar);
    !!if&(result)=-1;
      !!VR(result):Si;
    !!en;
    
    !!VRj: +1;
    !!br&j>=(subLength);
    !!co;
  !!en;

  !!VRj&j>0: -1;
  !!VR(result):S-1;
!!en;


!?FU(js_StringReplaceString);
// Replace a substring with a replacer
!#VA(stringInt:x) (substrInt:x) (substrReplacerInt:x) (result:x);

!!VR(temp:z):Sz(stringInt);
!!VR(subTemp:z):Sz(substrInt);

!!FU(js_FindSubstringInString):P(temp)/(subTemp)/?(index:y);
!!FU&(index)=-1;

!!SN:K(temp)/?(length:y);
!!SN:K(subTemp)/?(subLength:y);

!!VR(rPos:y):S(index) +(subLength);
!!VR(left:z):M1/(temp)/0/(index);
!!VR(right:z):M1/(temp)/(rPos)/(length);
!!VR(result):Z^%(left)%z(substrReplacerInt)%(right)^;


!?FU(js_StringPasteString);
// Paste a replacer before a substring
!#VA(stringInt:x) (substrInt:x) (substrReplacerInt:x) (result:x);

!!VR(temp:z):Sz(stringInt);
!!VR(subTemp:z):Sz(substrInt);

!!FU(js_FindSubstringInString):P(temp)/(subTemp)/?(index:y);
!!FU&(index)=-1;

!!SN:K(temp)/?(length:y);
!!SN:K(subTemp)/?(subLength:y);

!!VR(left:z):M1/(temp)/0/(index);
!!VR(right:z):M1/(temp)/(index)/(length);
!!VR(result):Z^%(left)%z(substrReplacerInt)%(right)^;


***************************************************************************************** Some SN:E stuff
!?FU(js_Hero_WearsArtifact);
!#VA(hero:x) (artId:x) (result:x);

!!VR(savedV1:y):Sv1;
!!SN:E5084256/(CALLCONV_THISCALL)/(hero)/(artId); 4D9460
!!VR(result):Sv1;
!!VRv1:S(savedV1:y);

***************************************************************************************** Ceil float
; Here, float is int multiplied by 1000 cuz you cant pass float as an argument in erm
!?FU(js_FloatToInt_Ceil);
!#VA(valueMultByTh:x) (upRoundedValue:x); 34.635 pass as 34635 -> 34.635 -> 35.135 -> 35

!!VR(adder:e):S1 :2;

!!VR(valueFloat:e):S(valueMultByTh);
!!VR(valueFloat): :1000;
!!VR(valueFloat): +(adder);
!!VR(upRoundedValue):S(valueFloat); it casts float to int using low boundary value (standart rounding in erm)
