ZVSE2
; Author:   Archer30
; Updated by daemon_n
; Original Author: Bonizag
; Engine:   ERM 2.0+
; Requires: ERA 3.3+, Era Erm Framework

; There is a 1/4 chance that a random hero will appear on the monster's side and help them fight.
; The chance would become 100% if i^Random_Neutral_Hero^ is TRUE
; This script works for human player only. It used to work for AI, but seems some devs don't like it.


// Hooks
; Here we do not check option as the option can possibly be enabled after starting the game
!?FU(WOG_CreateERMHook);
!#VA(setHook:x);

!!SN:E(setHook)/1/4685559/(WOG_72_OnAfterSetSurrenderButton); [Trigger After Surrender button got set]
!!SN:E(setHook)/1/4907364/(WOG_72_OnCompleteSeetHutsQuests); 4AE164
!!SN:E(setHook)/1/4908283/(WOG_72_OnAfterDefeatHero); 4AE4FB

// Disable Surrender button when fighting with random heroes
!?FU(WOG_72_OnAfterSetSurrenderButton)&i^wog_72_randHeroActive^;
!!FU(H3Dlg_GetCurrentDlg):P?(currDlg:y);
!!FU(H3Dlg_SendCmdToItem):P(currDlg)/2001/5/4096;

// Complete the seer huts quests as "defeating neutral stacks" instead of heroes
!?FU(WOG_72_OnCompleteSeetHutsQuests)&i^wog_72_randHeroActive^;
!#VA(hook:x);

!!SN:X?t/0;
!!UN:C(hook)/(STRUCT_HOOK_CONTEXT_RET)/4/4907386;

// Disable double object removal sound
// by daemon_n
!?FU(WOG_72_OnAfterDefeatHero)&i^wog_72_randHeroActive^;
!#VA(hook:x);

!!SN:X?t/0;
!!UN:C(hook)/(STRUCT_HOOK_CONTEXT_RET)/4/4908292;

// Manage variables before the battle, generates the neutral hero
!?FU(OnBeforeBattle)&i^wog_isNeutralBattle^/(ERM_FLAG_IS_HUMAN);
!!UN:P72/?(wogOption:y);
!!FU&(wogOption)<>(TRUE):E;

; Initilization
!!VRi^wog_72_randHeroActive^:S(FALSE);

; Check if there is any player not in the game
!!re i/(PLAYER_FIRST)/(PLAYER_LAST);
  !!OW:Ii/?(isAi:y)/?(hasLost:y);

  !!br&(hasLost);
!!en;

!!if&i<=(PLAYER_LAST);
  !!VRi^wog_72_randHeroActive^:S(TRUE);

  ; Check if it is lucky enough to encounter the neutral hero or else
  !!VR(random:y):R0/0/3;                  [25% chance]
  !!VR(random)&i^Random_Neutral_Hero^:S0; [Always generate a neutral hero if Always Random Hero is enabled]

  ; Get an available random hero and generate on the battlefield if lucky enough
  !!if&(random)=0;
    !!FU(WOG_GetRandomUnoccupiedHero):P?(randHero:y);

    !!if&(randHero)>(NO_HERO);
      !!HE(randHero):Z?(heroStruct:y);  [DON'T use HE:O as it might fail setting a hero to a lost player]
      !!UN:C(heroStruct)/34/(UNC_INT8)/i;
      !!BA:H1/(randHero);

      !!VRi^wog_72_randHero^:S(randHero);

      ; Store the availability of the hero in an array 
      ; Can be smarter if found the INT storing this thing from hero structure
      !!SN:Mi^wog_72_randHeroAvailabilityList^;
      !!FU(NewIntArray):P8/?i^wog_72_randHeroAvailabilityList^/(M_TEMP);

      !!re j/(PLAYER_FIRST)/(PLAYER_LAST);
        !!VR(playerBits:y):S1 Sd<<j;
        !!HE(randHero):R3/?(isAllowed:y)/(playerBits);
        !!SN:Mi^wog_72_randHeroAvailabilityList^/j/(isAllowed);
      !!en;
    !!el;
      !!VRi^wog_72_randHeroActive^:S(FALSE);
    !!en;
  !!el;
    !!VRi^wog_72_randHeroActive^:S(FALSE);
  !!en;
!!en;

// Store neutral stacks in global vars (in order to return them on battle replay)
// The timing is late for the compatibility with battle replay
!?FU(OnBeforeBattleUniversal_Quit)&i^wog_72_randHeroActive^;
!!re i/(ARMY_SLOT_FIRST)/(ARMY_SLOT_LAST);
  !!BA:M1/i/?i^wog_72_replayType_%i^/?i^wog_72_replayNum_%i^;
!!en;

!?FU(OnBeforeBattleReplay)&i^wog_72_randHeroActive^;
!!re i/(ARMY_SLOT_FIRST)/(ARMY_SLOT_LAST);
  !!BA:M1/i/i^wog_72_replayType_%i^/i^wog_72_replayNum_%i^;
!!en;

// Reset variables
!?FU(OnAfterBattleUniversal)&i^wog_72_randHeroActive^;
!!VRi^wog_72_randHeroActive^:S(FALSE);

; Restore the availability of the hero
!!re j/(PLAYER_FIRST)/(PLAYER_LAST);
  !!SN:Mi^wog_72_randHeroAvailabilityList^/j/?(isAllowed:y);
  !!VR(playerBits:y):S1 Sd<<j;
  !!HEi^wog_72_randHero^:R3/(isAllowed)/(playerBits);
!!en;

!!SN:Mi^wog_72_randHeroAvailabilityList^;
!!VRi^wog_72_randHero^:S0;
