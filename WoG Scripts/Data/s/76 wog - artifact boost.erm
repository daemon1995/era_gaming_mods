ZVSE2

** Artifact Boost ERM script v1.4 - Donald X. Vaccarino
** Updated Jul. 18. 2004 by Hermann the Weird
** Updated Dec 2022 by Archer30
** Requires WOG version 3.58 or later
** Make formerly weak artifacts do something special, usually once/week
** WoGify Name: script02.erm

** Bird Of Perception gives 6 Royal Griffins
** Pendant Of Life gives 24 Sprites
** Pendant Of Death gives 12 Zombies
** Targ Of The Rampaging Ogre provokes a fight with 30 Ogres
** Dead Man's Boots gives Dead Man's Boots
** Pendant Of Total Recall gives 1000 experience
** Emblem Of Cognizance gives 15 gold per troop
** Stoic Watchman reveals a large map area
** Pendant Of Second Sight upgrades lowly shooters
** Pendant Of Holiness gives a random holy spell
** Boots Of Polarity may be traded for a one-time movement bonus
** Garniture Of Interference may be traded for a magic skill
** Pendant Of Dispassion gives +1 knowledge
** Pendant Of Free Will upgrades golems and peasants

** following artifacts new as of script version 1.3

** Diplomat's Ring may be traded to double number of first level troops hero has
** Surcoat Of Counterpoise doubles the effects of these artifacts, where applicable
** Orb Of Vulnerability gives 1 Archmage plus another per level of Wisdom
** Sphere Of Permanence gives 1 Mighty Gorgon plus another per 10 Defense
** Statesman's Medal may be traded at a town for up to three buildings
** Orb Of Inhibition may be traded to modify a creature's abilities

** All artifacts function for the AI (if worn) but AI won't agree to trades.

** To use this code, put it into a Global Event, set to never happen.

** Variables Used: v600-v628, v631, v640-v648, z326-z331, i-l
** Flags Used: 1, 2, 5, 710-714

** w33 must not be modified by other programs, used for enabling/disabling weekly creatures!

** The other variables may be used elsewhere but will be trashed by this code.

** Functions Used: 599-609, 612, 613
!#DC(WOG_ART_BOOST_W_VAR_ID) = 33;


; Set up global vars for Diplomat's Ring and Emblem of Conizance
!?FU(WOG_OnResetHero);
!#VA(hero:x);

!!UN:P102/?(wogOption:y);                 [Check for Enhanced Artifacts I]
!!FU&(wogOption)<>(TRUE):E;

!!IF:W(hero);
!!VRw33:S0;

!?FU(OnAfterErmInstructions);
!!UN:P102/?(wogOption:y);                 [Check for Enhanced Artifacts I]
!!FU&(wogOption)<>(TRUE):E;

!!VR(unitLimit:y):S(INT_MAX);
!!VR(goldLimit:y):S(INT_MAX);
!!UN:J2/?(diff:y); // get difficulty (unlimited for easy, text won't be set)

!!if&(diff)>0;
  ; Diplomat's Ring
  !!VR(unitLimit)&(diff)=1:S1000; // max 1000 for normal and easy
  !!VR(unitLimit)&(diff)=2:S500; // max 500 for hard
  !!VR(unitLimit)&(diff)=3:S250; // max 250 for expert
  !!VR(unitLimit)&(diff)>=4:S100; // max 100 for impossible

  ; Emblem of Cognizance
  !!VR(goldLimit):S(unitLimit) *100;100000; // max 100000/50000/25000/10000 gold for normal/hard/expert/impossible
!!en;

; Set global var to be used each week
!!VRi^wog_102_diplomatsRingLimit^:S(unitLimit);
!!VRi^wog_102_emblemOfCognizanceLimit^:S(goldLimit);

** Timer routine

!?FU(OnEveryDay)&i^timerWeekday^=1/i^timerWeek^>1;
  !!UN:P102/?(wogOption:y);               [Check if Artifact Boost Script is enabled in WoGify Options]
  !!FU&(wogOption)<>(TRUE):E;             [Exit if it isn't]

  !!OW:Hi^timerOwner^/1; 
  
  !!if&v1;
    !!VR(size:y):Sv1;
    !!FU(NewIntArray):P(size)/?(heroes:y);

    !!re (vHeroId:y)/2/(size)/1/1; loop this player hero!
      !!VR(itemId:y):S(vHeroId) -2;
      !!SN:M(heroes)/(itemId:y)/v(vHeroId); daemon_n added this part cause some fucntions below changes v-var array
    !!en;

    !!re i/0/(size:y)/1/-1;
      !!SN:M(heroes)/i/?(heroId:y);
      !!FU(WOG_102_ExecuteArtifactEffects):P(heroId:y); [Iterate through all player heroes]
    !!en;
  !!en;

; Function for checking whether Surcoat of Counterpoise is worn
 !?FU(WOG_102_GetSurcoatBonus);
 !#VA(hero:x) (surcoatBonus:x);

  !!VR(surcoatBonus):S0;
  !!HE(hero):A2/(ART_SURCOAT_OF_COUNTERPOISE)/?(has:y)/?(equipped:y);
  !!VR(surcoatBonus)&(equipped)>0:S1;

!?FU(OnHeroScreenMouseClick)&i^mouse_action^=(MOUSE_RMB_PRESSED)/999;
!!UN:P102/?(wogOption:y); [Check if Artifact Boost Script is enabled in WoGify Options]
!!FU&(wogOption)<>(TRUE):E;     [Exit if it isn't]

; Exit if the hero does not belong to the interacting player
!!OW:C?(player:y)/?(interactPlayer:y);  [Get the player who's clicking the mouse button]
!!HE(CURRENT_HERO):O?(owner:y);
!!FU&(interactPlayer)<>(owner):E;

!!VR(slot:y):S(NO_ART_SLOT);
!!VR(item:y):Si^mouse_item^;

!!if&(item)>=2/(item)<=14|(item)=20;
  !!VR(slot):S(item) -2;
!!en;

!!FU&(slot)=(NO_ART_SLOT):E;

!!HE(CURRENT_HERO):N?(hero:y);
!!FU(WOG_102_PrepareToDisableArt):P(hero)/(slot);

!?FU(OnHeroesMeetScreenMouseClick)&i^mouse_action^=(MOUSE_RMB_PRESSED)/999;
!!UN:P102/?(wogOption:y); [Check if Artifact Boost Script is enabled in WoGify Options]
!!FU&(wogOption)<>(TRUE):E;     [Exit if it isn't]

!!VR(hero:y):S(NO_HERO);
!!VR(item:y):Si^mouse_item^;

!!if&(item)>=27/(item)<=39|(item)=45;
  !!VR(slot:y):S(item) -27;
  !!CM:H?(hero)/?(otherHero:y);
!!el&(item)>=46/(item)<=58|(item)=64;
  !!VR(slot):S(item) -46;
  !!CM:H?(otherHero)/?(hero);
!!en;

!!FU&(hero)=(NO_HERO):E;

!!FU(WOG_102_PrepareToDisableArt):P(hero)/(slot);


!?FU(WOG_102_PrepareToDisableArt);
!#VA(hero:x) (clickedSlot:x);

!!HE(hero):A1/?(clickedArt:y)/(clickedSlot);     [Check for weekly creature artifacts]

!!FU&(clickedArt)<>103/(clickedArt)<>104/(clickedArt)<>63/(clickedArt)<>92/(clickedArt)<>93:E;     [Exit if no weekly creature artifact]
!!CM:R0;     [Disable standard r-click info]

!!FU(NewIntArray):P?(arr:y);
!!FU(Array_Push):P(arr)/63/92/93/103/104;
!!SN:M(arr)/?(size:y);
!!IF:W(hero);     [w vars refer to current hero]

!!re i/0/(size)/1/-1;
  !!SN:M(arr)/i/?(artId:y);
  !!if&(artId)=(clickedArt);
    !!VR(bit:y):S1 Sd<<i;
    !!VR(bitCheck:y):Sw33 &(bit);

    !!if&(bitCheck);
      !!VR(stat:z):S^%T(wog.102.off)^;
      !!VR(rstat:z):S^%T(wog.102.on)^;
    !!el;
      !!VR(stat):S^%T(wog.102.on)^;
      !!VR(rstat):S^%T(wog.102.off)^;
    !!en;
    !!br;
  !!en;
!!en;

!!SN:H^art^/(artId)/1/?(artDesc:z) T^wog.102.switch^/?(msg:z)/^art_name^/(artDesc)/^stat^/(stat)/^rstat^/(rstat);

** Display question for enabling/disabling **
!!IF:Q2/(PIC_TYPE_ART)/(clickedArt)/(MSG_TYPE_QUESTION)/(msg);
!!VRw33&2:X(bit:y);

** end of r-click trigger for enabling/disabling weekly creature artifacts **


** function to check one hero for special artifacts
** note the code is broken up into multiple functions to speed it up
** checking 156 heroes for 12 artifacts would take forever

*?FU(WOG_102_Get)
  !?FU(WOG_102_GetBirdPercepBon);
  !#VA(heroId:x) (armyArrayId:x) (artsNum:x);
  !!VR(monBon:y):S6 *(artsNum);
  !!FU(Array_Push):P(armyArrayId)/(MON_ROYAL_GRIFFIN)/(monBon);
  !!if&i^timerIsAi^=(FALSE);
    !!FU(WOG_102_GetArmyAddMsg):P(heroId)/(MON_ROYAL_GRIFFIN)/1;
  !!en;

  !?FU(WOG_102_GetVulnerSphereBon);
  !#VA(heroId:x) (armyArrayId:x) (artsNum:x);
  !!HE(heroId):S(SKILL_WISDOM)/?(skillLvl:y);
  !!VR(monBon:y):S(skillLvl:y) +1 *(artsNum);
  !!FU(Array_Push):P(armyArrayId)/(MON_ARCH_MAGE)/(monBon);
  !!if&i^timerIsAi^=(FALSE);
    !!VR(index:y):S(monBon) F1/2 Sd-1 |(Wisdom) F1/2;
    !!FU(WOG_102_GetArmyAddMsg):P(heroId)/(MON_ARCH_MAGE)/(index:y);
  !!en;
  
  !?FU(WOG_102_GetPermaSphereBon);
  !#VA(heroId:x) (armyArrayId:x) (artsNum:x);

  ; Get the defense of the hero. Correct the value to 0 if it exceeds the max possible value (possible with artifacts that reduce PS)
  !!FU(WOG_GetMaxPrimarySkillValue):P?(maxPrimSkill:y);
  !!HE(heroId):F?y99/?(defense:y)/?y99/?y99;
  !!VR(defense)&(defense)>(maxPrimSkill):S0;

  !!VR(monBon:y):S(defense:y) :10 +1 *(artsNum);
  !!FU(Array_Push):P(armyArrayId)/(MON_MIGHTY_GORGON)/(monBon);
  !!if&i^timerIsAi^=(FALSE);
    !!VR(index:y):S(monBon) F1/2 Sd-1 |(defense) F1/2;
    !!FU(WOG_102_GetArmyAddMsg):P(heroId)/(MON_MIGHTY_GORGON)/1;
  !!en;
  !?FU(WOG_102_GetLifePendantBon);
  !#VA(heroId:x) (armyArrayId:x) (artsNum:x);
  !!VR(monBon:y):S24 *(artsNum);
  !!FU(Array_Push):P(armyArrayId)/(MON_SPRITE)/(monBon);
  !!if&i^timerIsAi^=(FALSE);
    !!FU(WOG_102_GetArmyAddMsg):P(heroId)/(MON_SPRITE)/1;
  !!en;
  !?FU(WOG_102_GetDeathPendantBon);
  !#VA(heroId:x) (armyArrayId:x) (artsNum:x);
  !!VR(monBon:y):S12 *(artsNum);
  !!FU(Array_Push):P(armyArrayId)/(MON_ZOMBIE)/(monBon);
  !!if&i^timerIsAi^=(FALSE);
    !!FU(WOG_102_GetArmyAddMsg):P(heroId)/(MON_ZOMBIE)/1;
  !!en;

  !?FU(WOG_102_GetArmyAddMsg);
  !#VA(heroId:x) (monId:x) (ind:x);
  !!HE(heroId):B0/?(heroName:z) R2/?(gender:y);
  !!SN:T^wog.whose%(gender:y)^/?(whose:z)
  T^wog.102.giveCreature.%(monId).%(ind)^/?(msg:z)/^heroName^/(heroName:z)/^whose^/(whose:z)/^whose^/(whose:z);
  !!VRs^wog_102_AddArmyMsg^:+^%(msg:z)%T(wog.endl)^;

!?FU(WOG_102_GivingSingleCreatureArts);
  !#VA(heroId:x) (surcoatBonus:x);
  !#VA(artsToGiveCreatures[5]:y) (fooPtrs[5]:y);
  !!VR(artsToGiveCreatures[0]):C(ART_BIRD_OF_PERCEPTION)/(ART_SPHERE_OF_PERMANENCE)/
  (ART_ORB_OF_VULNERABILITY)/(ART_PENDANT_OF_LIFE)/(ART_PENDANT_OF_DEATH);

  !!VR(fooPtrs[0]):C(WOG_102_GetBirdPercepBon)/(WOG_102_GetPermaSphereBon)/
  (WOG_102_GetVulnerSphereBon)/(WOG_102_GetLifePendantBon)/(WOG_102_GetDeathPendantBon);

  !!FU(NewIntArray):P?(monArmy:y);
  !!IF:W(heroId);
  !!re i/0/(artsToGiveCreatures[SIZE])/1/-1;

    !!if&(artsToGiveCreatures[i])<>(ART_BIRD_OF_PERCEPTION);
      !!HE(heroId):A2/(artsToGiveCreatures[i])/?y99/?(equippedArts:y);
    !!el;
      !!FU(WOG_102_GetBirdOfPerceptionQty):P(heroId)/?(equippedArts:y); [here we use a function for mod compatibility]
    !!en;

    !!if&(equippedArts);
      !!VR(bit:y):S1 Sd<<i &w(WOG_ART_BOOST_W_VAR_ID);
      !!if|(bit)=0/i^timerIsAi^;
        !!FU(fooPtrs[i]):P(heroId)/(monArmy)/(equippedArts:y); [call function by ptr id]
      !!en;
    !!en;
  !!en;

  !!SN:M(monArmy)/?(size:y);

  !!if&(size);
    !!if&i^timerIsAi^=0;
      !!FU(NewIntArray):P(size)/?(monDlg:y);
      !!re i/0/(size)/2/-1;
        !!VRj:Si +1;
        !!SN:M(monArmy)/i/?(monType:y) M(monArmy)/j/?(monNum:y);
        !!VR(monNum):Sd<<(surcoatBonus:x) Sd<<16 |(monType:y);
        !!SN:M(monDlg)/i/(PIC_TYPE_MONSTER) M(monDlg)/j/(monNum:y);
      !!en;
      !!FU(Array_Push)&(surcoatBonus):P(monDlg)/(PIC_TYPE_ART)/(ART_SURCOAT_OF_COUNTERPOISE);
      !!FU(PrepareMultiPicDialog):P(monDlg);

      !!IF:N(MSG_TYPE_MES)/s^wog_102_AddArmyMsg^;^lol^;
      !!VRs^wog_102_AddArmyMsg^:S^^;
    !!en;

    !!VR(isHuman:y):Si^timerIsAi^ X1;
    !!if&(isHuman);
      !!UN:C6885977/1/?(gosolo:y); gosolo
      !!VR(isHuman):X(gosolo);
    !!en;
    
    !!re i/0/(size)/2/-1;
      !!VRj:Si +1;
      !!SN:M(monArmy)/i/?(monType:y) M(monArmy)/j/?(monNum:y);
      !!VR(monNum):Sd<<(surcoatBonus);
      !!HE(heroId):C2/(monType:y)/(monNum)/(isHuman:y);
    !!en;
  !!en;

!?FU(WOG_102_GetBirdOfPerceptionQty);
!#VA(heroId:x) (result:x);

!!VR(result):S0;
!!HE(heroId):A2/(ART_BIRD_OF_PERCEPTION)/?(has:y)/?(result);

!?FU(WOG_102_ExecuteArtifactEffects);
!#VA(heroId:x);

!!FU(WOG_102_GetSurcoatBonus):P(heroId)/?(surcoatBonus:y); [Use a function for mod compatibility]

!!FU(WOG_102_GivingSingleCreatureArts):P(heroId:x)/(surcoatBonus);

!!FU(WOG_102_GivingStaticBonusArts):P(heroId:x)/(surcoatBonus);

!!FU(WOG_102_AskingStaticBonusArts):P(heroId:x)/(surcoatBonus);


!!OW:Ii^timerOwner^/?v603; [get AI (1) or human (0)]
!!VRv600:S(heroId);

!!HEv600:A2/(ART_TARG_OF_THE_RAMPAGING_OGRE)/?(has:y)/?v613; [check for Targ Of The Rampaging Ogre]

!!HEv600:A2/(ART_DEAD_MANS_BOOTS)/?(has)/?v614; [check for Dead Man's Boots]
!!HEv600:A2/(ART_PENDANT_OF_TOTAL_RECALL)/?(has)/?v615; [check for Pendant Of Total Recall]

!!FU(WOG_102_GetEmblemOfCognizanceQty):Pv600/?v616; [Use a function for mod compatibility]

!!HEv600:A2/(ART_STOIC_WATCHMAN)/?(has)/?v617; [check for Stoic Watchman]
!!HEv600:A2/(ART_PENDANT_OF_HOLINESS)/?(has)/?v619; [check for Pendant Of Holiness]
!!HEv600:A2/(ART_PENDANT_OF_DISPASSION)/?(has)/?v622; [check for Pendant Of Dispassion]

!!HEv600:A2/(ART_PENDANT_OF_SECOND_SIGHT)/?(has)/?v618; [check for Pendant Of Second Sight] upgrade
!!HEv600:A2/(ART_PENDANT_OF_FREE_WILL)/?(has)/?v623; [check for Pendant Of Free Will]

!!HEv600:A2/(ART_BOOTS_OF_POLARITY)/?(has)/?v620; [check for Boots Of Polarity]
!!HEv600:A2/(ART_GARNITURE_OF_INTERFERENCE)/?(has)/?v621; [check for Garniture Of Interference]

!!HEv600:A2/(ART_DIPLOMATS_RING)/?(has)/?v624; [check for Diplomat's Ring]
!!HEv600:A2/(ART_ORB_OF_INHIBITION)/?(has)/?v628; [check for Orb of Inhibittion]

!!FU(WOG_102_HandleArtifacts):P(surcoatBonus); [handle any artifact if found]

; Function to get the quantity of Emblem Of Cognizance. Here we use a funciton for it to be modified by other scripts
!?FU(WOG_102_GetEmblemOfCognizanceQty);
!#VA(hero:x) (result:x);

!!HE(hero):A2/(ART_EMBLEM_OF_COGNIZANCE)/?(has:y)/?(result); [check for Emblem Of Cognizance]

** end of function


** function to handle special artifacts for a hero who has one

!?FU(WOG_102_HandleArtifacts);
!#VA(surcoatBonus:x);                       [Bonuses provided by Surcoat Of Counterpoise]
!#VA(usedY[10]:y);

!!VRv608:Sv613 +v614 +v615 +v616 +v617 +v618 +v619 +v620 +v621 +v622 +v623;
!!VRv608:+v624 +v628;
!!FU&v608=0:E;

!!IF:Wv600;     [w vars refer to hero v600]
!!HEv600:B0/?z326; [get hero name]
!!HEv600:P?v604/?v605/?v606; [get hero x/y/level]
!!HEv600:R2/?v607; [get hero sex]

!!if&v607=0;
  !!VRz327:Sz102019;
  !!VRz328:Sz102021;
!!el;
  !!VRz327&v607=1:Sz102020;
  !!VRz328&v607=1:Sz102022;
!!en;

!!IF:V5/0;
!!IF&v603=0:V5/1; [use flag 5 to mean we've got a human player's hero]

!!if&5/(surcoatBonus)>0;
  !!VR(surcoatActive:y):Sv613 +v615 +v616 +v617 +v620 +v623 +v624;
  !!IF&(surcoatActive):M1/z102023;
!!en;

!!VRv631:S1;
!!VRv631&(surcoatBonus)>0:S2; [some effects will be multiplied by v631 - doubled for Surcoat]

; Dead Man's Boots
!!if&v614>0;
  ; Calculate how many pairs are in the backpack and if there is any slot available in the backpack
  !!VRy31:S0;

  !!re i/(ART_SLOT_BACKPACK_FIRST)/(ART_SLOT_BACKPACK_LAST);
    !!HEv600:A1/?y32/i;

    !!br&y32=(ART_DEAD_MANS_BOOTS);

    !!VRy31&y32=(NO_ART):+1;
  !!en;

  ; Give boots if there is a slot and there are no Dead Man's Boots in the backpack
  !!if&i>(ART_SLOT_BACKPACK_LAST)/y31>0;
    !!HEv600:A(ART_DEAD_MANS_BOOTS); [give Dead Man's Boots]
    !!IF&5:Q1/8/56/1/z102033;
  !!en;  
!!en;

; Pendant Of Total Recall
!!if&v615>0;
  !!VRy1:S1000;
  !!VRy1:*v631; [Surcoat factor]
  !!IF&5:Q1/17/y1/1/z102034;
  !!HEv600:Edy1; [give 1000 experience]
!!en;

; Emblem of Cognizance
!!if&v616>0;
  !!VRv24:S0; [0 counted]
  !!DO606/0/6/1:P; [count number of creatures Hero has]

  ; only if hero has creatures, which may not be always true
  !!if&v24>0;
    !!VRv27:S15;
    !!VRv27:*v631; [Surcoat factor]

    !!VRv24:*v27; [15 gold per creature]
    !!VRv24:F0/i^wog_102_emblemOfCognizanceLimit^; // limit the gold (depending on the difficulty)

    !!VRv24:*v616; [number of Emblems the hero has]
    !!VRv27:*v616;
    
    !!IF&5:Q1/(PIC_TYPE_RES_GOLD)/v24/(MSG_TYPE_MES)/z102035;
    !!OW:Ri^timerOwner^/(RES_GOLD)/dv24; [give the gold]
  !!en;
!!en;

; Stoic Watchman
!!if&v617>0;
  !!IF&5:M1/z102036;
  !!VRy1:S30; [area]
  !!VRy1&(surcoatBonus)>0:S42; [double area for Surcoat - 30 times square root of 2]
  !!UN:Sv604/v605/v606/i^timerOwner^/y1; [reveal area]
  !!SN&5:D; [redraw screen]
!!en;

; Pendant of Second Sight
!!if&v618>0;
  !!VR(upgraded:y):S(FALSE);
  !!VR(mons[8]:y):C(MON_ARCHER)/(MON_WOOD_ELF)/(MON_GREMLIN)/(MON_GOG)/(MON_BEHOLDER)/(MON_ORC)/(MON_LIZARDMAN)/(MON_AIR_ELEMENTAL);

  !!re i/(ARMY_SLOT_FIRST)/(ARMY_SLOT_LAST);
    !!HEv600:C0/i/?(type:y)/?(num:y);
    !!co&(num)<=0;

    !!re j/0/7;
      !!br&(type)=(mons[j]);
    !!en;

    !!if&j<=7;
      !!VR(upgraded):S(TRUE);
      !!FU(GetUpgradedMonster):P(mons[j])/?(upgMon:y);
      !!HEv600:C0/i/(upgMon)/d;
    !!en;
  !!en;

  !!IF&5/(upgraded):M1/z102037;
!!en;

; Pendant of Holiness
!!FU(WOG_102_LearnPendantOfHolinessSpell)&v619>0:P;     [Call function if Pendant of Holiness equipped]


!!if&5;
  ; Boots Of Polarity (works only for human player)
  !!if&v620>0;
    !!IF:Q2/z102040;
    !!IF&-2:M1/z102041;
    !!IF&2:M1/z102042;

    !!if&2;
      !!VRy1:S1700; [about a day's movement]
      !!VRy1:*v631; [Surcoat factor]

      !!HEv600:Wdy1; [add movement]
      !!HEv600:A3/59/1/1; [remove Boots Of Polarity]
    !!en;
  !!en;

  ; Garniture Of Interference (works only for human player)
  !!if&v621>0;
    ; Check if the hero can learn a new skill
    !!FU(WOG_GetNumberOfSecSkills):Pv600/?(numSkills:y);
    !!UN:C4881872/1/?(skillLimit:y);

    ; Get all the available choice of the hero
    !!FU(NewIntArray):P?(availMagicSkillsList:y);

    !!re i/(SKILL_FIRE_MAGIC)/(SKILL_EARTH_MAGIC);
      !!HEv600:Si/?(skillLvl:y);
      !!co&(skillLvl)<=(SKILL_NOT_LEARNED)/(numSkills)>=(skillLimit);

      !!FU(Array_Push)&(skillLvl)<(SKILL_EXPERT):P(availMagicSkillsList)/i;
    !!en;

    !!SN:M(availMagicSkillsList)/?(size:y);

    ; If the hero can learn (upgrade) any magic skill, pick one randomly
    !!if&(size)>0;
      !!VR(random:y):R0/1/(size) -1;
      !!SN:M(availMagicSkillsList)/(random)/?v26;
      !!HEv600:Sv26/?v27; [get level in that skill]

      !!SN:H^secskill^/v26/0/?z329; [get name of skill]
      !!VRv24:Sv26 *3 +3 +v27; [get picture number of skill at level given]
      !!IF:Q2/(PIC_TYPE_SEC_SKILL)/v24/(MSG_TYPE_QUESTION)/z102043;

      !!if&-2;
        !!IF:M1/z102044;
      !!el;
        !!IF:Q1/(PIC_TYPE_SEC_SKILL)/v24/(MSG_TYPE_MES)/z102046;
        !!HEv600:A3/(ART_GARNITURE_OF_INTERFERENCE)/1/1; [remove Garniture Of Interference]
        !!HEv600:Sv26/d1; [give skill]
      !!en;
    !!en;
  !!en;
!!en;

; Pendant Of Dispassion
!!if&v622>0;
  !!IF&5:Q1/34/v631/1/z102047;
  !!HEv600:Fd/d/d/dv631; [+1 knowledge]
!!en;

; Pendant Of Free Will
!!if&v623>0;
  !!VR(upgraded):S(FALSE);
  !!VR(mons[0]):C(MON_PEASANT)/(MON_GOLD_GOLEM)/(MON_IRON_GOLEM)/(MON_STONE_GOLEM);
  !!VR(upgMons[4]:y):C(MON_ROGUE)/(MON_DIAMOND_GOLEM)/(MON_GOLD_GOLEM)/(MON_IRON_GOLEM);
  !!VR(upgMons[2])&(surcoatBonus):C(MON_DIAMOND_GOLEM)/(MON_GOLD_GOLEM); [If Surcoat is active, change the upgrade type (upgrading twice)]

  !!re i/(ARMY_SLOT_FIRST)/(ARMY_SLOT_LAST);
    !!HEv600:C0/i/?(type)/?(num);
    !!co&(num)<=0;

    !!re j/0/3;
      !!br&(type)=(mons[j]);
    !!en;

    !!if&j<=3;
      !!VR(upgraded):S(TRUE);
      !!HEv600:C0/i/(upgMons[j])/d;
    !!en;
  !!en;

  !!IF&5/(upgraded):M1/z102048;
!!en;

; Diplomat's Ring (works only for human players)
!!if&5/v624>0;
  ; Check if the hero has any level 1 monster
  !!VR(hasLvOneMon:y):S(FALSE);

  !!re i/(ARMY_SLOT_FIRST)/(ARMY_SLOT_LAST);
    !!HEv600:C0/i/?(mon:y)/?(qty:y);

    !!if&(mon)>(NO_MON)/(qty)>0;
      !!MA:L(mon)/?(lv:y);
      !!VR(hasLvOneMon)&(lv)=(MON_MIN_LEVEL):S(TRUE);
    !!en;
  !!en;

  ; Ask if the hero would like to double level 1 monsters if he/she has any
  !!if&(hasLvOneMon);
    !!IF:Q2/z102049;

    ; Double level 1 if agreed
    !!if&2;
      !!IF:M1/z102050;

      ; Loop through all the stacks and double level 1
      !!re (slot:y)/(ARMY_SLOT_FIRST)/(ARMY_SLOT_LAST);
        !!HEv600:C0/(slot)/?(mon:y)/?(qty:y);

        !!if&(mon)>(NO_MON)/(qty)>0;
          !!MA:L(mon)/?(lv:y);

          !!if&(mon)>(NO_MON)/(qty)>0/(lv)=(MON_MIN_LEVEL);
            !!VR(additionalUnits:y):S(qty) F0/i^wog_102_diplomatsRingLimit^ Sd<<(surcoatBonus);// double bonus for Surcoat
            !!HEv600:C0/(slot)/?(mon)/d(additionalUnits); // add bonus creatures to the original creatures
          !!en;
        !!en;
      !!en;

      !!HEv600:A3/(ART_DIPLOMATS_RING)/1/1; [remove a Diplomat's Ring]

      !!SN:D; [redraw screen]
    ; Show msg if the hero disagreed
    !!el;
      !!IF:M1/z102051;
    !!en;
  !!en;
!!en;

; Orb Of Inhibition (works only for human players)
!!if&5/v628>0;
  ; Find a monater from the hero's army which did not learn either Attack Twice or No Retailiation
  !!FU(WOG_102_GetRandMonFromHeroArmy):P?(mon:y);

  ; Get the ability to learn if target is found
  !!if&(mon)>(NO_MON);                  [if the hero does have a creature]
    !!SN:H^monname^/(mon)/1/?z330;      [get plural name of creature into z330]
    !!MA:X(mon)/?(monFlags:y);
    !!VR(hasAtkTwice:y):S(monFlags) &(MON_FLAG_ATTACKS_TWICE);
    !!VR(hasNoRetail:y):S(monFlags) &(MON_FLAG_NO_RETALIATION);

    !!if&(hasAtkTwice)/(hasNoRetail)=(FALSE);
      !!VR(ability:y):S1;
    !!el&(hasAtkTwice)=(FALSE)/(hasNoRetail);
      !!VR(ability):S0;
    !!el&(hasAtkTwice)=(FALSE)/(hasNoRetail)=(FALSE);
      !!VR(ability):R0/0/1;             [pick no-retaliation or attack-twice to offer]
    !!en;

    !!if&(ability)=0;
      !!VRz331:Sz102052;
    !!el;
      !!VRz331:Sz102053;
    !!en;

    ; Ask if the player wants to procced with the trade
    !!IF:Q2/z102054;

    ; Remove the orb and add the ability to the found monster
    !!if&2;
      !!IF:M1/z102055;
      !!HEv600:A3/(ART_ORB_OF_INHIBITION)/1/1; [remove an Orb Of Inhibition]

      !!if&(ability)=0;
        !!MA:X(mon)/d|(MON_FLAG_ATTACKS_TWICE); [attack twice]
      !!el;
        !!MA:X(mon)/d|(MON_FLAG_NO_RETALIATION); [no retaliation]
      !!en;
    ; Refuse the offer
    !!el;
      !!IF:M1/z102056;
    !!en;
  !!en;
!!en;

; Targ Of The Rampaging Ogre
!!if&v613>0;
  !!IF&5:M1/z102057;
  !!VR(qty:y):S30 *v631;[Surcoat factor]
  !!HEv600:Tv604/v605/v606/(MON_OGRE)/(qty); [ogre fight]
!!en;

** end of function


** function to add one slot's number of troops
** slot number is in x16; result accumulates in k

!?FU606;

!!HEv600:C0/x16/d/?v26; [get # of troops in slot x16]
!!VRv24:+v26; [add them up]

** end of function


** function to get a creature form the hero's army which didn't learn either Attack Twice or No Retaliation

!?FU(WOG_102_GetRandMonFromHeroArmy);
!#VA(randMon:x);

!!VR(randMon):S(NO_MON);
!!FU(NewIntArray):P?(monArmy:y);

!!re i/(ARMY_SLOT_FIRST)/(ARMY_SLOT_LAST);
  !!HEv600:C0/i/?(mon:y)/?(qty:y);

  !!if&(mon)>(NO_MON)/(qty)>0;
    !!MA:X(mon)/?(monFlags:y);

    !!VR(hasAtkTwice:y):S(monFlags) &(MON_FLAG_ATTACKS_TWICE);
    !!VR(hasNoRetail:y):S(monFlags) &(MON_FLAG_NO_RETALIATION);

    !!FU(Array_Push)|(hasAtkTwice)=(FALSE)/(hasNoRetail)=(FALSE):P(monArmy)/(mon);
  !!en;
!!en;

!!SN:M(monArmy)/?(size:y);

!!if&(size)>0;
  !!VR(maxIndex:y):S(size) -1;
  !!VR(random:y):R0/0/(maxIndex);

  !!SN:M(monArmy)/(random)/?(randMon);
!!en;

** end of function


** trigger for clicking on Village Hall
** function to handle statesman's medal when trade chosen

!?FU(OnTownMouseClick)&i^mouse_action^=(MOUSE_LMB_PRESSED)/999; // trigger for click inside a town (TH0 will not work, because Wog crashes, if you build something inside a TH0-trigger)
!!UN:P102/?y-1; [Check if Artifact Boost script is enabled in WoGify Options]
!!FU&y-1<>1:E;     [Exit if it isn't]
!#VA(usedY[3]:y);
!!OW:C?y99/?(clickedPlayer:y);
!!CM:I?y-1; // get the clicked field
!!FU|y-1<10/y-1>13:E; // exit, if not clicked at Village-, Town- or City-Hall or Capitol
!!CA-1:H0/?(heroId:y) H1/?(anotherHeroId:y) O?(townOwner:y); // get garrison and visiting hero / town number
!!FU&(townOwner)<>(clickedPlayer):E;
!!VRv628:S0; // init

!!HE(heroId:y)&(heroId:y)>-1:A2/(ART_STATESMANS_MEDAL)/?y99/?v628; // check for Statesman's Medal - garrision hero
!!VR(heroId:y)&v628=0:S(anotherHeroId:y); // use visiting instead, if garrison has no Medal (or there is no)
!!HE(heroId:y)&(heroId:y)>-1:A2/(ART_STATESMANS_MEDAL)/?y99/?v628 O?(heroOwner:y); // check for Statesman's Medal - garrision hero

!!FU|v628<1/(heroOwner:y)<>(townOwner):E; // exit, if nobody has the medal

*!IF:V2/0; [AI won't give medal]
!!FU(NewIntArray):P?(buldingList:y);
!!CA(CURRENT_TOWN):U?(townId:y);
!!FU(WOG_102_GetBuildingArrayList):P(townId)/(buldingList:y);
!!SN:M(buldingList:y)/?(size:y);
!!if&(size);

  !!IF:Q2/(PIC_TYPE_ART)/(ART_STATESMANS_MEDAL)/(MSG_TYPE_QUESTION)/z102058;
  !!if&2;

    *!FU(WOG_Town_IsPossibleToBuildBuilding):P(townId)/30/?(canBuild:y);

    !!re i/0/(size)/1/-1;
      !!SN:M(buldingList)/i/?(buildingId:y);
      !!FU(WOG_Town_BuildBuildingWithAnimation):P(buildingId:y);      
    !!en;

    ; Show info and remove medal
    *!IF&y1=1/y2=1/y3>0:M1/z102060;
    *!IF&y1=1/y2=1/y3=0:M1/z102061;
    *!IF&y1=1/y2=0/y3>0:M1/z102062;
    *!IF&y1=0/y2=1/y3>0:M1/z102063;
    *!IF&y1=1/y2=0/y3=0:M1/z102064;
    *!IF&y1=0/y2=1/y3=0:M1/z102065;
    *!IF&y1=0/y2=0/y3>0:M1/z102066;
    *!VRy4:Sy1 +y2 +y3; // if y4 is now 0, nothing is built

    *!if&y4=0;
      *!IF:M1/z102067; // nothing built
    *!el;
      !!HE(heroId:y):A3/(ART_STATESMANS_MEDAL)/1/1; // remove Statesman's Medal, if something is built
    *!en;
      !!CM:R0;

  !!en;
!!en;
!?FU(WOG_102_GetBuildingArrayList);
!#VA(townId:x) (arrayId:x);

!!CA0/(townId):T?(townType:y); [get town type]

!!VR(specBuidldingId:y):S21;
!!if|(townType:y)=(TOWN_RAMPART)/(townType:y)=(TOWN_NECROPOLIS);
  !!VR(specBuidldingId:y):S17;
!!el&(townType:y)=(TOWN_DUNGEON);
  !!VR(specBuidldingId:y):S22;
!!en;
!#VA(buildings[4]:y);
!!VR(buildings[0]):C30/37/(specBuidldingId)/15;
!!CA0/(townId):B3/30;                          [check if little building isn't built]
!!if&-1;
  !!VR(trick:y):S(TRUE);
  !!CA0/(townId):B6/30;
!!en;
!!re i/0/(buildings[SIZE])/1/-1;
  !!CA0/(townId):B3/(buildings[i]);
  !!if&-1;
    !!FU(WOG_Town_IsPossibleToBuildBuilding):P(townId)/(buildings[i])/?(canBuild:y);
    !!FU(Array_Push)&(canBuild):P(arrayId)/(buildings[i]);
  !!en;
!!en;
!!if&(trick:y);                                           [return to builded state]
  !!VR(trick:y):S(TRUE);
  !!CA0/(townId):B2/30;
!!en;

** end of function

!?FU(WOG_102_LearnPendantOfHolinessSpell);     [Function for Pendant of Holiness]

!!HEv600:A2/0/?v24/?v25; [check for spell book]

!!if&v25=0;
  !!IF&5:Q1/8/102/1/z102038;     [Message if no spell book]
  !!FU:E;     [Exit if no spell book]
!!en;

!!IF:V1/0;     [Init flag for counting spells]
!!VRv1:S0;     [Init v var that carries spell number]
!!VRv920:C25/37/38/41/48; [table of spells]

!!DO613/920/924/1:P1/0/0;     [Looking in heroes spell book, counting spells not known to v1]

!!VRy2:Sv1 -1;     [Random number between 1 and v1]
!!VRy1:S1 Ry2;

!!VRv1&v1=0:S999;     [Abort if all spells known]

!!HEv600:B0/?z-1;     [Get hero name and sex]
!!HEv600:R2/?y-1;
!!VRz-2&y-1=0:Sz102021;
!!VRz-2&y-1=1:Sz102022;

!!IF&5/v1=999:Q1/8/102/1/z102071;

!!FU&v1=999:E;     [Exit if all spells known]

!!DO613/920/924/1:P1/y1/1;     [Find a random not-known spell]

!!HEv600:S7/?y-1;     [Get wisdom level]

!!IF&5/y-1=0/vv1=25:Q1/9/25/1/z102072;     [Display if spell is DU and no wisdom]
!!FU&y-1=0/vv1=25:E;

!!IF&5/y-1<2/vv1=38:Q1/9/38/1/z102073;     [Display if spell is Res. and no adv. wisdom]
!!FU&y-1<2/vv1=38:E;

!!IF&5/y-1<2/vv1=48:Q1/9/48/1/z102074;     [Display if spell is Pr. and no adv. wisdom]
!!FU&y-1<2/vv1=48:E;

!!IF&5:Q1/9/vv1/1^%Z102039^;     [Display the random not-known spell]
!!HEv600:Mvv1/1;     [Learn the random not-known spell]

!?FU613;     [Function to look up heroes spell book and find a random not-known spell]
!!HEv600:M=vx16/1;
!!VRvx1&x3=0/-1:+1;
!!VRvx1&x2=1/-1/x3=1:Sx16;
!!VRx16&x2=1/-1/x3=1:S999;
!!VRx2&x2>1/-1:-1;
 