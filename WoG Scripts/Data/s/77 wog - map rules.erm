ZVSE2

WoGify Name: script01.erm
Updated: Sep. 24, 2004 by Hermann the Weird
Updated: Dec 2022 by Archer30

WoGify ERM code: 101 (0-5) plus 111-130 (0-1) for individual rules
101 code value:
 0=choose map rules each game, defaulting to rules selected below
 1=choose map rules each game (no defaults)
 2=use rules selected in options dialogue
 3=use two random map rules
 4=use two random map rules from those selected in options dialogue
 5=disable all map rules

** Map Rules ERM script v2.0 - Donald X. Vaccarino
** Requires ERA version 3.9.1 or later
** Adds rules to a map on day one
** Several rules were suggested by Timothy Pulver
** WoGify Options editing by Timothy Pulver

** Modified by Thomas Franz (samot):
** - Heroes pick up double artifacts works only for artifacts that are on the map if you start the game

** Rules: (Number in parenthesis is ERM code)
**   1. Fliers can't fly but instead aren't retaliated against. (111)
**   2. Monster speed is inverted. (112)
**   3. Monsters are half price on 7th day of week. (113)
**   4. Heroes create magic plains each day. (114)
**   5. All monsters attack twice. (115)
**   6. Monster stacks in hero armies grow by 4% each day, to 100000 max. (116)
**   7. Most dwellings also have boars. (117)
**   8. Heroes start at 5th level (+5000 experience). (118)
**   9. Heroes pick up double artifacts. (119)
**  10. Perpetual darkness. (120)
**  11. Heroes have double movement. (121)
**  12. Mines change resources once/week. (122)
**  13. +1 places can be revisited each month. (123)
**  14. Heroes get 9th-10th skills. (124) - replaced with Capitol can be built in every town by Archer30
**  15. A hero's upgraded 7th level monsters automatically become 8th level. (125)
**  16. Heroes gain an artifact each level. (126)
**  17. Rogues attack heroes at random. (127)
**  18. All creatures have a breath weapon. (128)
**  19. Shooters can't shoot but instead have +50% hit points. (129)
**  20. All towns have a grail (only used if no confluxes on map) (130)
**  21. All towns have Warlord's Banners in front of them. (239)

** Variables Used: v1-v4,
** z680, z681-z697 (reserved for future rules!)
** Flags Used: 875
** PO:N(=15) for Artifacts on the map (OB-Type 5) if double artifact rule is on
** PO:O(=-2) for Warlord's Banner placed on the map (OB-Type 5/156) if Warlord's Banner placement is on

!#DC(WOG_RULES_CHOOSE_DEFAULT) = 0;
!#DC(WOG_RULES_CHOOSE_EACH_GAME) = 1;
!#DC(WOG_RULES_FROM_MENU) = 2;
!#DC(WOG_RULES_TWO_RANDOM) = 3;
!#DC(WOG_RULES_TWO_RANDOM_FROM_MENU) = 4;
!#DC(WOG_NO_MAP_RULES) = 5;
*#DC(WOG_OPT_FIRST_MAP_RULES_AMOUNT) = 21;
!#DC(WOG_OPT_FIRST_MAP_RULE_ID) = 111;

** end of initialization functions



** end of Initialization Code


** function to only take effect at start ALL of them works for all players - function call is :P :D;
; Daily events now starts from the second day only - same mechanism as the original H3
!?FU(WOG_101_RunMapRulesOnce);
  !!FU(WOG_101_BuildGrailsInTowns)&i^wog_101_map_rule_19_isEnabled^:P;           [build grails in towns - executed once]

  !!FU(WOG_101_SetDoubledHeroesMovements)&i^wog_101_map_rule_10_isEnabled^:P;    [executed once - needed for the first player turn]
  !!FU(WOG_101_PlaceWarlordsBanner)&i^wog_101_map_rule_20_isEnabled^:P;          [executed once]

  !!FU(WOG_101_AllowMultiplyCapitols)&i^wog_101_map_rule_13_isEnabled^:P;        [executed once]
  !!FU(WOG_101_AddBoarsOrAirElemsToDwells)&i^wog_101_map_rule_6_isEnabled^:P;    [executed once]
  !!FU(WOG_101_SetDoubledArtifacts)&i^wog_101_map_rule_8_isEnabled^:P;           [executed once]

  !!FU(WOG_101_SetUpMonsters):P;                                                 [executed once]
  !!FU(WOG_101_HideMapInitPlayer)&i^wog_101_map_rule_9_isEnabled^:P;




!?FU(OnEveryDay)&i^timerDay^>1;

  !!FU(WOG_101_SetMonstersHalfPrice)&i^wog_101_map_rule_2_isEnabled^:P D;
  !!FU(WOG_101_PlaceMagicPlains)&i^wog_101_map_rule_3_isEnabled^:Pi^timerOwner^ Di^timerOwner^;

  !!FU(WOG_101_HideMapInitPlayer):P(CURRENT_PLAYER) D(CURRENT_PLAYER);

  !!if&i^timerOnce^;
    !!FU(WOG_101_UpgradeTo8thLvl)&i^wog_101_map_rule_14_isEnabled^:P D;       
    !!FU(WOG_101_IncreaseArmies)&i^timerOnce^/i^wog_101_map_rule_5_isEnabled^:P D;                     [build grails in towns]

    !!if&i^timerWeekDay^=1;
      !!FU(WOG_101_ClearHeroVisistedObjects)&i^timerMonthDay^=1/i^wog_101_map_rule_12_isEnabled^:P D;
      !!FU(WOG_101_UpdateWarlordsBannerGuard)&i^wog_101_map_rule_20_isEnabled^:P D;
      !!FU(WOG_101_ChangeMineProductions)&i^wog_101_map_rule_11_isEnabled^:P D;
    !!en;
  !!en;


!?FU(WOG_101_PickRandomOptions); [create list of options we can work with]
!#VA(mapRulesMode:x) (rulesList:x);

  !!SN:M(rulesList)/?(size:y);




  !!FU(NewIntArray):P?(arrayForRandomPick:y);
  !!re i/0/(size)/1/-1;
    !!SN:M(rulesList)/i/?(optionId:y);
    !!if&(optionId)>0;                                 [if not disabled by script]
      !!if&(mapRulesMode)=(WOG_RULES_TWO_RANDOM_FROM_MENU);
        !!UN:P(optionId)/?(isEnabled:y);
        !!co&(isEnabled)=0;
      !!en;
      !!FU(Array_Push):P(arrayForRandomPick)/i;
    !!en;
  !!en;

  !!SN:M(arrayForRandomPick)/?(size:y);
  !!if&(size);
    !#VA(randomId[2]:y);
    !!if&(size)>1;
      !!FU(Array_Shuffle):P?(arrayForRandomPick);
      !!SN:M(arrayForRandomPick)/0/?(randomId[0]) M(arrayForRandomPick)/1/?(randomId[1]);
      !!VRi^wog_101_map_rule_%(randomId[0])_isEnabled^:S(TRUE);
      !!VRi^wog_101_map_rule_%(randomId[1])_isEnabled^:S(TRUE);
    !!el;
      !!SN:M(arrayForRandomPick)/0/?(randomId[0]);
      !!VRi^wog_101_map_rule_%(randomId[0])_isEnabled^:S(TRUE);
    !!en;
  !!en;

!?FU(WOG_101_ReadOptionsFromMenu); [create list of options we can work with]
!#VA(rulesList:x);

  !!re i/0/19;(end_value);
    !!VR(optionId:y):Si +(WOG_OPT_FIRST_MAP_RULE_ID);
    !!SN:M(rulesList)/i/(optionId);
  !!en;

  !!SN:M(rulesList)/20/239;        [add warlords]

!?FU(WOG_101_AcceptOptionsFromMenu);
!#VA(rulesList:x);
!!SN:M(rulesList)/?(size:y);
!!re i/0/(size)/1/-1;
  !!SN:M(rulesList)/i/?(optionId:y);
  !!if&(optionId)>0;
    !!UN:P(optionId)/?i^wog_101_map_rule_%i_isEnabled^;
  !!en;
!!en;
!?FU(WOG_101_SetRemoteIntVariable);
!#VA(name:x) (val:x);
!!VRi^%z(name)^:S(val);

!?FU(WOG_101_SyncMapRulesVariables);
!!re i/0/20;
  !!FU(WOG_101_SetRemoteIntVariable):D^wog_101_map_rule_%i_isEnabled^/i^wog_101_map_rule_%i_isEnabled^;
!!en;


!?FU(OnEveryDay)&i^timerDay^=1;
  !!UN:P101/?(mapRulesMode:y);                                                               [check wogify options number - 5 means no rules]
  !!FU&(mapRulesMode)=(WOG_NO_MAP_RULES):E;                                                  [Exit timer if map rules are disabled in wogify options]

  !!if&i^timerOnce^;
    !!UN:U(OBJ_TOWN)/(TOWN_CONFLUX)/?(isAnyConflux:y) P234/?(isBannerBanned:y);

    !!FU(NewIntArray):P21/?(rulesList:y);
    !!FU(WOG_101_ReadOptionsFromMenu):P?(rulesList);

    !!SN&(isAnyConflux:y):M(rulesList)/19/d*-1;                                                [clear grails option affection lol]
    !!SN&(isBannerBanned:y):M(rulesList)/20/d*-1;                                           [clear warlord banners affection lol]

    !!if&(mapRulesMode)=(WOG_RULES_FROM_MENU);
      !!FU(WOG_101_AcceptOptionsFromMenu):P?(rulesList);                                       [accept current options]
    !!el|(mapRulesMode)=(WOG_RULES_CHOOSE_DEFAULT)/(mapRulesMode)=(WOG_RULES_CHOOSE_EACH_GAME);
      !!FU(WOG_101_ChooseMapRules):P(mapRulesMode)/?(rulesList:y);                             [choose rules and implement some]
    !!el|(mapRulesMode)=(WOG_RULES_TWO_RANDOM)/(mapRulesMode)=(WOG_RULES_TWO_RANDOM_FROM_MENU);
      !!FU(WOG_101_PickRandomOptions):P(mapRulesMode)/?(rulesList:y);                          [pick random]
    !!en;
    
    !!FU(WOG_101_SyncMapRulesVariables):P;

    !!UN:R5/1/1 R7/0/1;                                                                        [Change mouse cursor to "wait" hourglass symbol][Show mouse cursor and disable changing]
    !!FU(WOG_101_RunMapRulesOnce):P D;
    !!UN:R7/0/0 R5/0/0;                                                                        [Show mouse cursor and enable changing][Restore default cursor]
    !!UN:P230/?(showMapRules:y);                                                               [Check if Display Map Rules chosen at Map Start is enabled]
    !!if&(showMapRules);
      !!FU(WOG_230_AnnounceMapRules):P D;                                                      [announce rules to humans after 1st player on day 1]
    !!en;
  !!en;

  !!FU(WOG_101_SetHeroes5thLevel)&i^wog_101_map_rule_7_isEnabled^:Pi^timerOwner^;             [executed once]


** end of timer routine




** function to choose rules start

!?FU(WOG_101_ChooseMapRules);
!#VA(mapRulesMode:x) (rulesList:x);

  !!SN:M(rulesList)/?(size:y);
  !!VRv2:C0/0;                                                           [clear presetup variables]

  // Prapare options text
  !!re i/0/(size)/1/-1;
    !!SN:M(rulesList)/i/?(optionId:y);

    !!VR(zVar:y):Si+1;
    !!SN:T^wog.101.dlg.%i^/?z(zVar);

    !!if&(optionId:y)<0;                                                 [if option is negative it means it can't be enabled;]
      !!VR(optionId):*-1;                                                [set it positve back to check for default state]
      !!VRz(zVar):+^ %T(wog.101.dlg.disabled)^;
    !!en;

    !!co&(mapRulesMode)<>(WOG_RULES_CHOOSE_DEFAULT);

    !!VR(vVar:y):Si -9 F0/1 +2;
    !!UN:P(optionId)/?(isEnabled:y);
    !!if&(isEnabled);
      !!VR(bit:y):S1 Sd<<i;
      !!VRv(vVar):|(bit);
    !!en;
  !!en;


  [get bit choices from v2 and set there]
  !!IF:G0/2/v2/^%T(wog.101.dlg.title0)^/1/2/3/4/5/6/7/8/9/10;
  !!VRv3:Sd>>10;                                                         [shift to right to write values properly at second page]
  [get bit choices from v3 and set there]
  !!IF:G0/3/v3/^%T(wog.101.dlg.title1)^/11/12/13/14/15/16/17/18/19/20/21;
  !!VRv3:Sd<<10;                                                         [shift to left to read values properly at second page]

  // iterate options again;
  !!re i/0/(size:y)/1/-1;
    !!VR(bit:y):S1 Sd<<i;
    !!VR(vVar:y):Si -9 F0/1 +2;
    !!VR(check:y):Sv(vVar:y) &(bit);                                     [check selection bit]

    !!SN:M(rulesList)/i/?(optionId:y);                                   [check if it wasn't force disabled]
    !!if&(check)/(optionId)>0; 
      !!VRi^wog_101_map_rule_%i_isEnabled^:S(TRUE);                      [enable option into variable]
    !!en;
  !!en;


!?FU(WOG_230_AnnounceMapRules);
  !#VA(isHeroScreen:x) (result:x);
  !!VR(result):S(TRUE);

  !!VR(optToStart:y):S-1;
  !!re i/0/20;320;
    !!if&i^wog_101_map_rule_%i_isEnabled^;
      !!VR(optToStart):Si;
      !!br;
    !!en;
  !!en;

  !!if&(optToStart)<>-1;
    !!SN:T^wog.101.description.%(optToStart)^/?(headOpt:z);
    !!VRs^wog_230_mapRulesString^:S^%T(wog.101.description.head)%(headOpt:z)^;

    !!VR(optToStart):+1;
    !!re i/(optToStart)/20;320;
      !!if&i^wog_101_map_rule_%i_isEnabled^;
        !!SN:T^wog.101.description.%i^/?(optionDesc:z);
        !!VRs^wog_230_mapRulesString^ +^%T(wog.endl)%T(wog.101.description.also)%(optionDesc:z)^;
      !!en;
    !!en;
    !!VR(ms:y):S(MSG_TYPE_MES);
    !!if&(isHeroScreen);
      !!VR(ms:y):S(MSG_TYPE_QUESTION);
      !!VRs^wog_230_mapRulesString^ +^%T(wog.endl)%T(wog.endl)%T(wog.101.description.papyrus)^;
    !!en;
    !!IF:Q2/-1/-1/(ms:y)/^%s(wog_230_mapRulesString)^;   [Show rules]
    !!VR(result)&-2:S(FALSE);
    !!VRs^wog_230_mapRulesString^:S^^;    [Release the string]
  !!en;


** end of function


** function to change monster stats (inverted speed, attack twice and breath attack)
!?FU(WOG_101_SetUpMonsters);

  !!VR(invertedSpeedOn:y):Si^wog_101_map_rule_1_isEnabled^; [check for rule 1]
  !!VR(attackTwiceOn:y):Si^wog_101_map_rule_4_isEnabled^;   [check for rule 4]
  !!VR(breathAttackOn:y):Si^wog_101_map_rule_17_isEnabled^; [check for rule 17]
  !!VR(noShooting:y):Si^wog_101_map_rule_18_isEnabled^;     [check for rule 18 - shooters lose shooting but gain +50% hit points]
  !!VR(noFlying:y):Si^wog_101_map_rule_0_isEnabled^;        [check for rule 0 fliers lose flying but can't be retaliated against].]

  !!VR(atLeastOneOptionIsEnabled:y):S(FALSE);

  !!re i/(@invertedSpeedOn)/(@noFlying);(end_value);
    !!if&yi;
      !!VR(atLeastOneOptionIsEnabled:y):S(TRUE);
      !!br;
    !!en;
  !!en;


  !!if&(atLeastOneOptionIsEnabled);

    !!UN:C6768560/4/?(creatureInfoTablePtr:y);

    !!FU(GetMaxMonsterId):P?(maxMonId:y);
    !!FU(WOG_101_GetAffectedMonArray):P?(shouldThisMonIdBeAffected:y)/(maxMonId);

    !!if&(attackTwiceOn);
      !!re i/(MON_FIRST)/(maxMonId);
        !!SN:M(shouldThisMonIdBeAffected)/i/?(haveTo:y);
        !!MA&(haveTo:y):Xi/d|(MON_FLAG_ATTACKS_TWICE);
      !!en;
    !!en;

    !!if&(breathAttackOn);
      !!re i/(MON_FIRST)/(maxMonId);
        !!SN:M(shouldThisMonIdBeAffected)/i/?(haveTo:y);
        !!MA&(haveTo:y):Xi/d|(MON_FLAG_WIDE_ATTACK);
      !!en;
    !!en;

    !!if&(noShooting);
      !!UN:P(WOG_OPT_STACK_EXPERIENCE)/?(stackExp:y);

      !!re i/(MON_FIRST)/(maxMonId);
        !!SN:M(shouldThisMonIdBeAffected)/i/?(haveTo:y);
        !!co&(haveTo:y)=(FALSE);
        !!MA:Xi/?f;
        !!VRf:&(MON_FLAG_SHOOTER);

        !!if&f;
          !!MA:Xi/d-(MON_FLAG_SHOOTER);

          !!VR(offset:y):S116 *i +76;
          !!UN:C(creatureInfoTablePtr:y)/(offset:y)/4/?h;
          !!VRh:*3 :2;
          !!UN:C(creatureInfoTablePtr:y)/(offset:y)/4/h;

          ; Remove shooting stack exp ability
          !!if&(stackExp);

            !!re k/0/19;
              !!EAi:Bk/d/?(abilitiy:y)/?(modifier:y)/d/d/d/d/d/d/d/d/d/d/d;
              ; Disable the ability if it is not Attack, Defense, Health, Max Damage, Speed or Min Damage
              !!if&(abilitiy)=102;                                                               [if it is flag ability]
                !!EAi|(modifier)=69/(modifier)=83/(modifier)=115:Bk/0/0/0/0/0/0/0/0/0/0/0/0/0/0; [no melee penalty/shooter/close shooting]
              !!el|(abilitiy)=79/(abilitiy)=105/(abilitiy)=111;                                  [shots/ no distance /no obstacle penalties]
                !!EAi:Bk/0/0/0/0/0/0/0/0/0/0/0/0/0/0;
              !!en;
            !!en;
          !!en;
        !!en;
      !!en;
    !!en;

    !!if&(noFlying);
      !!re i/(MON_FIRST)/(maxMonId);
        !!SN:M(shouldThisMonIdBeAffected)/i/?(haveTo:y);
        !!co&(haveTo:y)=(FALSE);

        !!MA:Xi/?f;
        !!VRf:&(MON_FLAG_FLYER);
        !!if&f;
          !!MA:Xi/d-(MON_FLAG_FLYER) Xi/d|(MON_FLAG_NO_RETALIATION);
        !!en;
      !!en;
    !!en;

    !!if&(invertedSpeedOn);
      !!VR(maxSpeed:y):S0;

      !!re i/(MON_FIRST)/(maxMonId);
        !!SN:M(shouldThisMonIdBeAffected)/i/?(haveTo:y);
        !!co&(haveTo:y)=(FALSE);
        !!MA:Si/?s;
        !!VR(maxSpeed)&s>(maxSpeed):Ss;Fs/d;
      !!en;

      *!IF:M^%(maxSpeed)^;
      !!re i/(MON_FIRST)/(maxMonId);
        !!SN:M(shouldThisMonIdBeAffected)/i/?(haveTo:y);
        !!co&(haveTo:y)=(FALSE);
        !!MA:Si/?s;
        !!VR(speed:y):S(maxSpeed) -s +3;F3/d;
        !!MA:Si/(speed:y);

        *!FU(WOG_112_InvertMonsterSpeeds):Pi;[invert monster speeds]
      !!en;
    !!en;
    
  !!en;

!?FU(WOG_101_GetAffectedMonArray);
!#VA(arrayId:x) (maxMonId:x);
  !!VR(arraySize:y):S(maxMonId) +1;
  !!FU(NewIntArray):P(arraySize)/?(arrayId);

  !!re (mon:y)/0/(maxMonId);
    !!co&(mon)>=(MON_CATAPULT)/(mon)<=(MON_ARROW_TOWERS);  // exit, if it is a war machine
    !!co&(mon)>=(MON_COMMANDER_FIRST_A)/(mon)<=(MON_COMMANDER_LAST_D);  // exit, if it is a commander
    !!co|(mon)=(MON_NOT_USED_1)/(mon)=(MON_NOT_USED_2)/(mon)=(MON_NOT_USED_3)/(mon)=(MON_NOT_USED_4);  // exit, if it is a dummy-catapult (from the War Machine Scriptes)

    !!SN:M(arrayId)/(mon)/(TRUE);
  !!en;

  !!SN:F^ExtendArrayLifetime^/(arrayId);




** function to make hero at least 5th level if it has owner x1
!?FU(WOG_101_SetHeroes5thLevel);
!#VA(playerId:x);
!#VA(tavernHeroes[2]:y);

  *!re j/0/(PLAYER_LAST);                              [affect all heroes with owner btw]
    !!OW:H(playerId)/1 V(playerId)/?(tavernHeroes[0])/?(tavernHeroes[1]);
    !!VR(heroesNum:y):Sv1;
    !!re i/0/(tavernHeroes[SIZE])/1/-1;
      !!if&(tavernHeroes[i])<>(NO_HERO);
        !!VR(heroesNum:y):+1;
        !!VR(vVar:y):S(heroesNum:y) +1;
        !!VRv(vVar:y):S(tavernHeroes[i]);
      !!en;
    !!en;

    !!re i/2/(heroesNum:y)/1/1;
      !!HEvi:E?(exp:y)/?l/1;
      !!if&(exp)<5000;
        !!VR(exp):-5000 *-1; 
        !!HEvi:Ed(exp:y);
      !!en;
    !!en;
  *!en;



!?FU(WOG_101_AddBoarsOrAirElemsToDwells);
  !!UN:U(OBJ_CREATURE_GENERATOR_1)/-1/?(dwellings:y);                                                 [count dwellings]

  !!VRv2:S-1;
  !!VR(addedMon:y):S(MON_BOAR);
  !!UN:P67/?(neutralTown:y);                                                       [check if Neutral town is active (flag1)]
  !!VR(addedMon:y)&(neutralTown:y):S(MON_AIR_ELEMENTAL);

  !!re i/0/(dwellings)/1/-1;
    !!UN:U(OBJ_CREATURE_GENERATOR_1)/-1/-1/2; [get dwelling location into v600-v602]
    !!DW2:M0/?t/?q; [get y1 type y2 qty in slot 0]
    !!MA:Lt/?l; // get monster Level
    !!if&l/t<>(MON_BOAR)/t<>(MON_NOMAD)/t<>(MON_AIR_ELEMENTAL)/t<>(MON_STORM_ELEMENTAL);
      !!DW2:M1/(addedMon:y)/12; [12 boars / Air Elementals in slot 1]
    !!en;
  !!en;

** end of function


** artifact trigger

!$OB(OBJ_ARTIFACT)&i^wog_101_map_rule_8_isEnabled^;

!!HE-1:O>-1; // check if hero has owner (hero could lost the battle vs guardians of the artifact)
!!FU&-1:E;

!!PO998:N?y5; // get custom number of the artifact-field
!!FU&y5=0:E; // exit if =0 (usually an artifact left by the player - it should not be doubled)

!!OB998:U?y1; [get artifact number]
!!FU&y1<7:E; // exit if lower than Centaur's Axe

!!UN:P904/1; // disable WOG error messages (because of bug with the AR receiver)
!!re i/0/(ARMY_SLOT_LAST);// check for guardians in slots 1-7
  !!AR998:Gi/?y98/?y99;
  !!FU&y99>0:E; // exit, if artifact is still guarded (hero chose not to fight)
!!en;


!!UN:P904/0; // enable  WOG error messages again

*!UN:Ay1/=0;
*!FU&-1:E; // exit, if not enabled - Archer30: This is not needed at all

!!HE-1:A2/y1/?y2/?y3; [get y2 number carried y3 number equipped]
!!HE-1&y2<2:Ay1; [give an extra copy if they don't already have one (<2, because the found artifact is given already to the hero in the after trigger]
*!UN:N0/-1/y1; [get name of artifact into z2]
!!if&999/y2<2;
  !!SN:H^art^/y1/0/?(artName:z) T^wog.119.find^/?(msg:z)/^artName^/(artName);
  !!IF:Q1/(PIC_TYPE_ART)/y1/1/(msg:z);
!!en;

!!PO998&y5=15:N0; // set to 0 it was an "original" artifact (placed on the map by the map maker)

** end of artifact trigger


!?FU(WOG_101_HideMapInitPlayer);
  !#VA(playerId:x);
  !!if&(playerId:x)=(CURRENT_PLAYER);
    !!OW:C?(playerId:x)/?(playerId:x);
  !!en;
  !!UN:X?i^wog_101_mapSize^/?i^wog_101_hasUnderground^; [get size/underground]
  !!VRi^wog_101_halfMapSize^:Si^wog_101_mapSize^ :2; [get half of size = middle of map]

  !!FU(WOG_GameMgr_GetPlayer_Team):P(playerId:x)/?(team:y);
  !!VRi^wog_101_playersBitSet^:S1 Sd<<(playerId:x);
  !!if&(team)<>(NO_PLAYER);
    !!re i/0/(PLAYER_LAST);
      !!FU(WOG_GameMgr_GetPlayer_Team):Pi/?t;
      !!if&t=(team);
        !!VR(bit:y):S1 Sd<<i;
        !!VRi^wog_101_playersBitSet^:|(bit);
      !!en;
    !!en;
  !!en;

** hero movement trigger
!?FU(OnHeroMove)&i^wog_101_map_rule_9_isEnabled^/999;
!!re i/0/i^wog_101_hasUnderground^;
  !!UN:Hi^wog_101_halfMapSize^/i^wog_101_halfMapSize^/i/i^wog_101_playersBitSet^/i^wog_101_mapSize^;
!!en;
** end of hero movement trigger

** function to let hero revisit objects
!?FU(WOG_101_ClearHeroVisistedObjects);
  !!re i/0/(HERO_LAST_WOG);
    !!re j/0/9;
      !!HEi:Vj/0; [set hero to have not visited all objects of this type]
    !!en;
  !!en;
** end of function

** function to change a mine's produced resource

!?FU(WOG_101_ChangeMineProductions);
  !!UN:U(OBJ_MINE)/(ANY_OBJ)/?(minesQty:y); [count mines: y1]
  !!VRv2:S-1;                               [reset coordinate index]
  !!re i/0/(minesQty)/1/-1;
    !!UN:U(OBJ_MINE)/(ANY_OBJ)/-1/2;        [get mine location into v600-v602]
    !!if&i^wog_36_enabled^;                 [if mithril enhancements are enabled]
      !!PO2:N?(isProtected:y);
      !!if&(isProtected);
        !!PO2:N0;                           [reset protection and go to next mine]
        !!co;
      !!en;
    !!en;
    !!VRr:R0/(RES_FIRST)/(RES_LAST_SOD);    [random 0-6] tested in MP - went work but if any issue then change func to pass rand seed as arg]
    !!MN2:Rr/1;                             [set random resource produced]
  !!en;
** end of function


** hero level-up trigger
!?FU(OnHeroGainLevel)&i^wog_101_map_rule_15_isEnabled^/i^wog_101_numberOfArtsLeft^=0;
  !!HE(CURRENT_HERO):N?(hero:y);
  !!HE(hero):O?o;

*!IF:L^%o^;
*!if&o<>(NO_OWNER);

  !!HE(hero):E?(exp:y)/?(lvl:y)/1;
  !!OW:Io/?(isAi:y);
  !!if|(isAi)/o=(NO_OWNER);
    !!VR(vLvl:y):S(lvl:y) Sd>>1 :6 +1 F1/4;
    !!VR(artLevel:y):S1 Sd<<(vLvl);
    !!UN:J6/(artLevel)/?(art:y);
    !!HE(hero):A4/(art); [give (equip) artifact]
  !!el;
    !!VRf:S0;
    !!re i/(lvl:y)/104;
      !!FU(WOG_GetExpRequirementOfLevel):Pi/?(neededExp:y);
      !!if&(exp)<(neededExp);
        !!br;
      !!en;
      !!VRf:+1;
    !!en;
    !!VRi^wog_101_numberOfArts^:Sf;
    !!VRi^wog_101_numberOfArtsLeft^:Sf;
    !!VRi^wog_101_startLvl^:S(lvl:y);
  !!en;
*!en;


!?FU(OnAfterHeroGainLevel)&i^wog_101_numberOfArts^;
  !!VRi^wog_101_numberOfArtsLeft^:-1;

  !!if&i^wog_101_numberOfArtsLeft^=0;

    !!VR(arraySize:y):Si^wog_101_numberOfArts^ Sd<<1;
    !!FU(NewIntArray):P(arraySize:y)/(PIC_TYPE_ART)/?(artList:y);

    !!re i/1/(arraySize:y)/2;/1/-1;
      !!VR(vLvl:y):Si Sd>>1 +i^wog_101_startLvl^ :6 +1 F1/4;
      !!VR(artLevel:y):S1 Sd<<(vLvl);
      !!UN:J6/(artLevel)/?(art:y);
      !!HE(CURRENT_HERO):A4/(art); [give (equip) artifact]
      !!SN:M(artList)/i/(art);
    !!en;

    !!VR(dlgNums:y):S(arraySize) :16;
    !!VR(remainder:y):S(arraySize) %16 F0/1;
    !!VR(dlgNums):+(remainder);
    !!VR(itemsLeft:y):S(arraySize:y);
    !!HE(CURRENT_HERO):B0/?z2;

    !!re i/0/(dlgNums)/1/-1;
      !!VR(firstItem:y):Si *16;
      !!VR(count:y):S16 F1/(itemsLeft);
      !!VR(itemsLeft):-(count:y);
      !!FU(Array_Slice):P(artList)/(firstItem)/(count)/?(picsArray:y);
      !!FU(PrepareMultiPicDialog):P(picsArray:y);
      ; Set up the string to display
      !!VR(isPlural:y):S(count) :2 -1 F0/1;
      !!SN:T^wog.126.art%(isPlural)^/?(artString:z);
      !!SN:T^wog.126.title^/?(msg:z)/^hero^/z2/^artifact^/(artString);
      !!IF:N(MSG_TYPE_MES)/(msg);
    !!en;

    !!VRi^wog_101_numberOfArts^:S0;
    !!VRi^wog_101_startLvl^:S0;

  !!en;

** end of hero level-up trigger

EveryDays Routine




!?CO2&i^wog_101_map_rule_7_isEnabled^; // is called after buying a Commander in a Town

  !!CO(CURRENT_HERO):T?(commanderType:y);

  !!if&(commanderType)=0;
    !!CO(CURRENT_HERO):X1/d7500; // give 5000 + 50% Experience to Paladins
  !!el;
    !!CO(CURRENT_HERO):X1/d5000; // give 5000 Experience to other commanders
  !!en;

** end of CO2


** Object triggers for Rogue fights

!?OB12; [campfire]
!!FU(WOG_101_RoguesAmbush):P?(owner:y); [handle generating roving bands of Rogues]
!!SN&(owner)=(NO_OWNER):Q;

!?OB17; [most creature dwellings]
!!FU(WOG_101_RoguesAmbush):P?(owner:y); [handle generating roving bands of Rogues]
!!SN&(owner)=(NO_OWNER):Q;

!?OB29; [flotsam]
!!FU(WOG_101_RoguesAmbush):P?(owner:y); [handle generating roving bands of Rogues]
!!SN&(owner)=(NO_OWNER):Q;

!?OB32; [garden of revelation]
!!FU(WOG_101_RoguesAmbush):P?(owner:y); [handle generating roving bands of Rogues]
!!SN&(owner)=(NO_OWNER):Q;

!?OB39; [lean to]
!!FU(WOG_101_RoguesAmbush):P?(owner:y); [handle generating roving bands of Rogues]
!!SN&(owner)=(NO_OWNER):Q;

!?OB47; [school of magic]
!!FU(WOG_101_RoguesAmbush):P?(owner:y); [handle generating roving bands of Rogues]
!!SN&(owner)=(NO_OWNER):Q;

!?OB51; [mercenary camp]
!!FU(WOG_101_RoguesAmbush):P?(owner:y); [handle generating roving bands of Rogues]
!!SN&(owner)=(NO_OWNER):Q;

!?OB53; [mine]
!!FU(WOG_101_RoguesAmbush):P?(owner:y); [handle generating roving bands of Rogues]
!!SN&(owner)=(NO_OWNER):Q;

!?OB55; [mystical garden]
!!FU(WOG_101_RoguesAmbush):P?(owner:y); [handle generating roving bands of Rogues]
!!SN&(owner)=(NO_OWNER):Q;

!?OB57; [obelisk]
!!FU(WOG_101_RoguesAmbush):P?(owner:y); [handle generating roving bands of Rogues]
!!SN&(owner)=(NO_OWNER):Q;

!?OB58; [redwood observatory]
!!FU(WOG_101_RoguesAmbush):P?(owner:y); [handle generating roving bands of Rogues]
!!SN&(owner)=(NO_OWNER):Q;

!?OB60; [pillar of fire]
!!FU(WOG_101_RoguesAmbush):P?(owner:y); [handle generating roving bands of Rogues]
!!SN&(owner)=(NO_OWNER):Q;

!?OB61; [star axis]
!!FU(WOG_101_RoguesAmbush):P?(owner:y); [handle generating roving bands of Rogues]
!!SN&(owner)=(NO_OWNER):Q;

!?OB79; [resource]
!!FU(WOG_101_RoguesAmbush):P?(owner:y); [handle generating roving bands of Rogues]
!!SN&(owner)=(NO_OWNER):Q;

!?OB82; [sea chest]
!!FU(WOG_101_RoguesAmbush):P?(owner:y); [handle generating roving bands of Rogues]
!!SN&(owner)=(NO_OWNER):Q;

!?OB88; [shrine of magic incantation]
!!FU(WOG_101_RoguesAmbush):P?(owner:y); [handle generating roving bands of Rogues]
!!SN&(owner)=(NO_OWNER):Q;

!?OB94; [stables]
!!FU(WOG_101_RoguesAmbush):P?(owner:y); [handle generating roving bands of Rogues]
!!SN&(owner)=(NO_OWNER):Q;

!?OB100; [learning stone]
!!FU(WOG_101_RoguesAmbush):P?(owner:y); [handle generating roving bands of Rogues]
!!SN&(owner)=(NO_OWNER):Q;

!?OB101; [treasure chest]
!!FU(WOG_101_RoguesAmbush):P?(owner:y); [handle generating roving bands of Rogues]
!!SN&(owner)=(NO_OWNER):Q;

!?OB102; [tree of knowledge]
!!FU(WOG_101_RoguesAmbush):P?(owner:y); [handle generating roving bands of Rogues]
!!SN&(owner)=(NO_OWNER):Q;

!?OB104; [university]
!!FU(WOG_101_RoguesAmbush):P?(owner:y); [handle generating roving bands of Rogues]
!!SN&(owner)=(NO_OWNER):Q;

!?OB105; [wagon]
!!FU(WOG_101_RoguesAmbush):P?(owner:y); [handle generating roving bands of Rogues]
!!SN&(owner)=(NO_OWNER):Q;

!?OB107; [school of war]
!!FU(WOG_101_RoguesAmbush):P?(owner:y); [handle generating roving bands of Rogues]
!!SN&(owner)=(NO_OWNER):Q;

!?OB109; [water wheel]
!!FU(WOG_101_RoguesAmbush):P?(owner:y); [handle generating roving bands of Rogues]
!!SN&(owner)=(NO_OWNER):Q;

!?OB112; [windmill]
!!FU(WOG_101_RoguesAmbush):P?(owner:y); [handle generating roving bands of Rogues]
!!SN&(owner)=(NO_OWNER):Q;

!?OB113; [witch hut]
!!FU(WOG_101_RoguesAmbush):P?(owner:y); [handle generating roving bands of Rogues]
!!SN&(owner)=(NO_OWNER):Q;

** end of set of object triggers


** function to generate roving bands of Rogues

!?FU(WOG_101_RoguesAmbush)&i^wog_101_map_rule_16_isEnabled^/i^timerDay^<>i^wog_127_lastRogueDate_%i(timerOwner)^;
!#VA(owner:x);

  !!VR(owner):S8;                       [Initialisation. Do not initialise it to NO_OWNER as it triggers SN:Q by default!]

  !!if&i^timerIsHuman^;
    !!VR(random:y):S0 R15; [1 in 16 chance for human]
  !!el;
    !!VR(random):S0 R63; [1 in 64 chance for AI]
  !!en;

  !!IF:V875/0;

  !!if&(random)=0; [continue if odds are met and rule active and no other Rogues today]
    ; Check if the terrain is water
    !!TR998:T?(terrain:y);

    ; Land - Rogues / Water - Water Elementals
    !!HE(CURRENT_HERO):N?(hero:y); [get hero number]
    !!HE(hero):B0/?(heroName:z); [get hero name]

    !!if&i^timerIsHuman^;
      !!if&(terrain)<>8;
        !!VR(mon:y):S(MON_ROGUE);
        !!SN:T^wog.127.land^/?(mes:z)/^heroName^/(heroName);
        !!IF:Q1/21/143/1/(mes:z);
      !!el;
        !!VR(mon):S(MON_WATER_ELEMENTAL);
        !!SN:T^wog.127.water^/?(mes:z)/^heroName^/(heroName);
        !!IF:Q1/21/115/1/(mes:z);
      !!en;
    !!en;

    !!VR(rogueNum:y):Si^timerWeek^ *10; [10 Rogues per elapsed week]


    !!HE(hero):Ed/?(lv:y)/1; [get hero level]
    !!VR(rogueNum):S(lv) *10 +(rogueNum); [#Rogues = 10*week + 10*level]

    !!IF:V875/1;           (For mithril and chest scripts)
    *!UN:C(ADV_MANAGER)/4/?(advMgr:y);
    *!FU(WOG_PackedCoords):Pv998/v999/v1000/?(packedCoords:y);
    *!HE(hero):Z?(heroStruct:y);
    *!UN:C(heroStruct)/145/4/?(armyPtr:y);

    *!re i/1/7;
      *!VRj:Si +7;
      *!VRvi:S(MON_PIXIE);
      *!VRvj:S3;
    *!en;
    *!VRi^battle_hero_0^:S(hero);
    *!SN:E4903264/(CALLCONV_THISCALL)/(advMgr)/(packedCoords)/(heroStruct)/?v1/(CURRENT_PLAYER)/0/0/?v1/-1/1/0;
    *!IF:L^%v1^;
      *!VRi^battle_hero_1^:S(NO_HERO);

    !!HE(hero):Tv998/v999/v1000/(mon)/(rogueNum); [provoke Rogue battle]
    !!HE(hero:y):O?(owner); [get hero owner]

    !!if&(owner)<>(NO_OWNER);
      !!if&(terrain)<>8;
        !!VR(gold:y):S(rogueNum) *10 +300; [10 gold per Rogue + 300]
        !!OW:R(owner)/(RES_GOLD)/d(gold); [give gold if hero lived]
        !!IF&i^timerIsHuman^:Q2/(PIC_TYPE_RES_GOLD)/(gold)/(MSG_TYPE_MES)/^%T(wog.127.treasure)^;
      !!en;

      !!IF:V875/0;    (For mithril and chest scripts)
    !!en;

    !!VRi^wog_127_lastRogueDate_%i(timerOwner)^:Si^timerDay^; [set day of last Rogue fight]
  !!en;

** end of function

** function to upgrade all lvl 7 monsters
!?FU(WOG_101_UpgradeTo8thLvl);
  !#VA(monsToUpgrade[9]:y);
  !#VA(monsIntoUpgrade[9]:y);
  !!VR(monsToUpgrade[0]):C13/27/41/55/69/83/97/111/131;
  !!VR(monsIntoUpgrade[0]):C150/151/152/153/154/155/156/157/158;
  !!re i/0/(HERO_LAST_WOG);
    !!HEi:Z?(hero:y);
    !!VR(hero):+145;                                                [add army offset to pass armyptr]
    !!re j/0/(monsToUpgrade[SIZE])/1/-1;
      !!SN:E4500112/(CALLCONV_THISCALL)/(hero:y)/(monsToUpgrade[j]); [if this army has any mon of type]
      !!if&v1;
        !!HEi:C1/(monsToUpgrade[j])/(monsIntoUpgrade[j])/d/d/3;
      !!en;
    !!en;
  !!en;

** function to build a grail in town # x16
!?FU(WOG_101_BuildGrailsInTowns);
  !!UN:U(OBJ_TOWN)/(ANY_OBJ)/?(townsAmount:y);
  !!if&(townsAmount);
    !!UN:C(GAME_MANAGER)/(UNC_UINT32)/?(game:y); 
    !!UN:C(game)/136724/(UNC_UINT32)/?(ptr:y); 
    !!re i/0/(townsAmount)/1/-1;
      !!VR(town:y):Si *360 +(ptr);
      !!SN:E6025696/(CALLCONV_THISCALL)/(town)/26/(FALSE)/(FALSE); [don't restrict bulding and don't give bonuses to heroes;]
    !!en;
    !!UN:C(ADV_MANAGER)/4/?(advMgr:y) C(advMgr)/228/4/?(screenPosition:y);
    !!SN:E4271008/(CALLCONV_THISCALL)/(advMgr)/(screenPosition:y)/1/1/0/0/0; [redraw minimap]
  !!en;

!?FU(WOG_101_SetDoubledHeroesMovements);
  !!re i/0/(HERO_LAST_WOG);
    !!HEi:Wd<<1 Gd<<1; [set hero's new movement plus initial hero movement values]
  !!en;

!?FU(WOG_101_SetDoubledArtifacts);
  !!VR(x:y):S-1;
  !!re i;                               [; loop through all the artifacts on the map]
    !!UN:U(OBJ_ARTIFACT)/(ANY_OBJ)/-1/(x)/(y:y)/(z:y);
    !!br&(x)<0;
    !!PO(x)/(y)/(z):N15; // set custom number for map field to 15 (used for double artifact rule)
  !!en;


** end of functions


 [Put Warlord's Banners in front of Towns]
!?FU(WOG_101_PlaceWarlordsBanner);


  !!UN:U(OBJ_TOWN)/(ANY_OBJ)/?(townsAmount:y) X?(mapSize:y)/?y99 J2/?(gameDifficulty:y);                                  [Number of Towns on map: y1]
  !!re i/0/(townsAmount)/1/-1;
    !!CA0/i:T?t O?o P?(x:y)/?(y:y)/?(z:y);                                                            [Town Type: t, Owner: o]
    !!if&(y)<(mapSize);
      !!VR(y):+1;
      !!UN:E(x)/(y)/(z);
      !!if&1;
        !!VR(x):+1;
        !!UN:E(x)/(y)/(z);
        !!if&1;
          !!VR(x):-2;
          !!UN:E(x)/(y)/(z);
          !!co&1;
        !!en;
      !!en;

      !!UN:I(x)/(y)/(z)/(OBJ_ARTIFACT)/(ART_WARLORDS_BANNER)/(FALSE); [Place Warlord's Banner, no redraw]
      !!if&(gameDifficulty)>2;
        !!VR(monType:y):St +(MON_SUPREME_ARCHANGEL);
      !!el;
        !!VRl:S(gameDifficulty) :2 +5;
        !!VR(upg:y):S(gameDifficulty) &1 X1;
        !!UN:Tt/l/(upg)/?(monType:y);
      !!en;
      !!if&o<>(NO_OWNER);
        !!AR(x)/(y)/(z):X0 G0/(monType:y)/1;; [If Town is owned, set 0 guardians and don't turn them on]
        !!PO(x)/(y)/(z):Oo; [Set PO:O to town owner (y3)]
      !!el;
        !!AR(x)/(y)/(z):X1 G0/(monType:y)/1; [Set 1 Guardian with message]
      !!en;
    !!en;

  !!en;


 [Add 1 to Banner Guardians on day 1 of each month]
!?FU(WOG_101_UpdateWarlordsBannerGuard)&i^timerWeekDay^=1;

  !!VR(growthWeek:y):Si^timerMonthWeek^ &1;
  !!if&(growthWeek:y);
    !!UN:J2/?(gameDifficulty:y); [Number of Warlord's Banners on map: y10]
    !!if&i^timerMonthWeek^=3/(gameDifficulty:y);
      !!VR(growthWeek:y):S(gameDifficulty:y) +1 &1;
      !!FU&(growthWeek:y)=0:E;
    !!en;

    !!UN:U(OBJ_ARTIFACT)/(ART_WARLORDS_BANNER)/?(artsNum:y);
    !!VRv2:S-1;
    !!re i/0/(artsNum)/1/-1;
      !!UN:U(OBJ_ARTIFACT)/(ART_WARLORDS_BANNER)/-1/2 ; [Store Banner Coordinates in v1/v2/v3]
      !!PO2:O?y2; [Read PO:O for Warlord's Banner: y2]
      !!OB2:C?y10;  [y10 - object config]

      !!if&y2>-2/y10<0;
        !!AR2:X1 G0/d/d1;y1; [Enable guards and set number of guards to y1]
      !!en;
    !!en;
  !!en;

!?FU(WOG_101_SetMonstersHalfPrice);
  !!VR(shouldBeHalfPriced:y):S(FALSE); [assume creatures should be normal price]
  !!if&-1000;
    !!VR(shouldBeHalfPriced):S(TRUE); [for AI with this rule they're always half price]
  !!el&i^timerWeekday^=7;
    !!VR(shouldBeHalfPriced):S(TRUE); [for humans just half price on sunday]
  !!en;
  !!if&(shouldBeHalfPriced)<>i^wog_113_isHalfPriced^;
    !!FU(GetMaxMonsterId):P?(lastMon:y);   [fix max mon id - Archer]

    !!if&(shouldBeHalfPriced);
      !!DO(WOG_101_DecreaseMonPrice)/0/(lastMon)/1:P; [make creatures half price when needed]
    !!el;
      !!DO(WOG_101_IncreaseMonPrice)/0/(lastMon)/1:P; [make creatures double price when needed]
    !!en;
    !!VRi^wog_113_isHalfPriced^:S(shouldBeHalfPriced); [remember whether creatures currently are normal or half price]
  !!en;

!?FU(WOG_101_DecreaseMonPrice);

!!MA&x16<145|x16>149:Cx16/6/d>>1; [save gold cost, except for war machines]

** end of function


** function to make monster x16 cost twice as much
!?FU(WOG_101_IncreaseMonPrice);

!!if&x16<145|x16>149;
  !!MA:Cx16/6/?y1; [get gold cost]
  !!VRy1:*2;       [double price]
  !!VRy2:Sy1 %10;  [check low digit of price]
  !!VRy1&y2=4:+1;  [turn 4's to 5's]
  !!MA:Cx16/6/y1;  [save gold cost, except for war machines]
!!en;


** end of function

!?FU(OnHeroScreenMouseClick)&i^mouse_item^=128/i^mouse_action^=(MOUSE_LMB_RELEASED);
  !!UN:P101/?(mapRulesMode:y);
  !!FU&(mapRulesMode)=(WOG_NO_MAP_RULES):E;
  !!FU(WOG_230_AnnounceMapRules):P(TRUE)/?(result:y);
  !!if&(result)=0;
    !!CM:R0;
  !!en;
** end of function

; Capitol can be built in every town by Archer30 (replaces Heroes get 9th-10th skills option)
!?FU(WOG_OnCaptureTown)&i^wog_101_map_rule_13_isEnabled^;
!!SN:X?t/0;
!!UN:Cx1/(STRUCT_HOOK_CONTEXT_RET)/4/6025676;

!?FU(WOG_101_AllowMultiplyCapitols);
!!UN:C4955234/(UNC_INT8)/?i^wog_124_patch1^ C4955234/(UNC_INT8)/0; [rule 14] - Capitol can be built in every town]

!?FU(OnAfterLoadGame)&i^wog_101_map_rule_13_isEnabled^;
!!UN:C4955234/(UNC_INT8)/?i^wog_124_patch1^ C4955234/(UNC_INT8)/0;

!?FU(OnGameLeave)&i^wog_101_map_rule_13_isEnabled^;
!!UN:C4955234/(UNC_INT8)/i^wog_124_patch1^;

!?FU(WOG_OnSetHeroMovementPoints)&i^wog_101_map_rule_10_isEnabled^;
!#VA(address:x);
!!UN:C(address)/(STRUCT_HOOK_CONTEXT_EAX)/4/d<<1;

!?FU(WOG_101_IncreaseArmies);        [** function to make slot x16 of hero x1's army grow by 4%, to 10000]

  !!re i/0/(HERO_LAST_WOG);
    !!re j/0/(ARMY_SLOT_LAST);
      !!HEi:C0/j/?t/?q;              [get t type q qty]
      !!if&t<>(NO_MON);
        !!VRn:Sq *104: 100 Fq/100000;
        !!HEi&n>q:C0/j/t/n;          [set new q]
      !!en;
    !!en;
  !!en;

!?FU(WOG_101_PlaceMagicPlains);
!#VA(playerID:x);
!!OW:H(playerID)/1;
!!re i/2/v1/1/1;(end_value);
  !!HEvi:P?(x:y)/?(y:y)/?(z:y);/?y4/?y5; [get hero x/y/l]
  !!if&(z)=0;
    !!VR(x):+2;
    !!VR(y):+1;
    !!TR(x:y)/(y:y)/(z:y):P?(pass:y) E?(notYellow:y) T?(terrain:y)/d/d/d/d/d/d/d;
    !!if&(pass)/(notYellow)/(terrain)<>8;
      !!UN:I(x:y)/(y:y)/(z:y)/(OBJ_MAGIC_PLAINS)/0/0; [place magic plains]
    !!en;
  !!en;
!!en;
