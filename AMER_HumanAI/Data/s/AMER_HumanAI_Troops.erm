ZVSE2
**
**  Written by Matteo "Ameranth" T. 2022.
**
**  Improves AI strength by simulating how a human consolidates troops on thier powerful hero(s).
**
**  Specifically, AI heroes who are not visible to any human in the game send their troops to their
**  two highest level heroes, who must also not be visible. Troops sent are those that match
**  troops the receiving heroes already have (upgraded or not). At least 1 of troops Tier <=5
**  are kept, to ensure heroes don't end up with no army at all.
**  --------------------------

**  --------------------------------------------------
**  Consts:
!#DC(HUAI_SENDTROOPS_LOWTIER) = 2;  //The <= tier of troop that a donor hero will always keep one of after sending troops.
!#DC(HUAI_UNSAFETOWN_DAYS) = 7;		//The number of days that an AI's town will remain "unsafe" when it is threatened. This prevents funnelTroops from sending troops away from the town.
**  --------------------------------------------------


**  --------------------------
**  Send troops from weaker heroes to AI's best/second-best:
!?FU(huAI_dailyAIBestHeroes)&i^huAI_funnelTroops^=(TRUE);
    !#VA(owner:x);
    
    !!FU&i^timerDay^<5:E;                                                       //Don't do troop sending before day 5. This gives the AI some time to establish who their major hero(es) will be.
    
    !!FU&i^huAI_currentHero_Count^<2:E;                                         //Exit if player doesn't own at least 2 heroes.
    !!FU(huAI_SendTroops_Main):P;
    
    
!?FU(huAI_SendTroops_Main);
    !!FU(huAI_CanPlayerSee):Pi^huAI_currentHero_1^/i^huAI_currentHero_2^/?(bestVisible:y)/?(secondVisible:y);       //Get if any human player can see best/second-best heroes.
    !!FU&(bestVisible)=(TRUE)/(secondVisible)=(TRUE):E;                         //Exit if both best/second-best hero are visible, since we have nothing to do.
    
    !!re i/2/i^huAI_currentHero_Count^:;                                        // 2=index of second-best hero. We don't want to send units from best hero.
        !!VR(loopHero:y):Si^huAI_currentHero_%i^;
        
        !!FU(huAI_CanPlayerSee):P(loopHero)/-1/?(loopHeroVisible:y)/1;          //Get if any human player can see iterated hero.
        !!if&(loopHeroVisible)=(FALSE):;                                        //Only send troops if donor hero is not visible.
            !!VR(donorHasArmy:y):S(FALSE);                                      //Default false, this may be set to true during huAI_SendTroops.
            !!FU(huAI_SendTroops)&(bestVisible)=(FALSE):P0/(loopHero)/-1/-1/-1/i^huAI_currentHero_1^/?(donorHasArmy);
            !!FU(huAI_SendTroops)&i^huAI_currentHero_2^>(NO_HERO)/(secondVisible)=(FALSE)/(loopHero)<>i^huAI_currentHero_2^/(donorHasArmy)=(TRUE):P0/(loopHero)/-1/-1/-1/i^huAI_currentHero_2^/?(donorHasArmy);    //If also not second best and still have an army, try sending troops there as well.
            !!FU(huAI_PreventNoArmy)&(donorHasArmy)=(FALSE):P(loopHero);        //If hero has no army, provide them with 1 troop from their starting army.
        !!en:;
    !!en:;
    
    
**  Grant 1 troop of slot0 from hero's starting army.
!?FU(huAI_PreventNoArmy);
    !#VA(hero:x);
    !!HE(hero):H0/?(monType:y)//;           //Get type of troop to create.
    !!HE(hero):C2/(monType)/1/0;            //Give 1 of the troop.
**  --------------------------



**  --------------------------
**  Whenever a best/secondBest hero visits a town during a turn, record this.
**  At turn end we will do troop sending for visited towns.
!?OB(OBJ_TOWN)&i^huAI_on^=(TRUE)/i^huAI_funnelTroops^=(TRUE)/i^timerIsAi^=(TRUE);
    !!HE-1:N?(hero:y);
    !!FU&(hero)<>i^huAI_currentHero_1^/(hero)<>i^huAI_currentHero_2^:E;         //Exit if not best or secondBest hero.
    
    !!VR(x:y):Sv998;
    !!VR(y:y):Sv999;
    !!VR(z:y):Sv1000;
    
    !!HE(hero):O?(heroOwner:y);
    !!CA(x)/(y)/(z):O?(townOwner:y);
    !!FU&(heroOwner)<>(townOwner):E;                                            //Exit if not owner of the town.

    !!VRi^huAI_townVisitedCount^:+1;
    !!VR(visitedCount:y):Si^huAI_townVisitedCount^;
    !!CA(x)/(y)/(z):U?(townID:y);
    !!FU&(townID)<0:E;                                                          //Exit if invalid townID.
    
    !!VRi^huAI_townVisited_%(visitedCount)_hero^:S(hero);                       //store hero/townID with index, so that we can loop up to visitedCount on turn end.
    !!VRi^huAI_townVisited_%(visitedCount)_Id^:S(townID);
    
    //!IF:L^town visited, count:%(visitedCount).^;       TEST
    
    
    
!?FU(huAI_dailyAIBestHeroes_EndOfTurn)&i^huAI_funnelTroops^=(TRUE);
    !#VA(owner:x);
    
    !!re i/1/i^huAI_townVisitedCount^:;
        !!VR(hero:y):Si^huAI_townVisited_%i_hero^;
        !!VR(town:y):Si^huAI_townVisited_%i_Id^;
        !!VRi^huAI_townVisited_%i_hero^:S0;                     //Remove vars as we finish with them.
        !!VRi^huAI_townVisited_%i_Id^:S0;
	
		!!FU(huAI_IsTownSafe):P(town)/?(isFunnelTroopsSafe:y);
		!!co&(isFunnelTroopsSafe)=(FALSE):;						//If it is not safe, co to checking next town.
        
        !!CA0/(town):P?(x:y)/?(y:y)/?(z:y);                     //Get xyz of town.
        !!FU(huAI_SendTroops):P2/(town)/(x)/(y)/(z)/(hero);     //Try to send troops from town to hero.
    !!en:;
    
    !!VRi^huAI_townVisitedCount^:S0;
**  --------------------------



**  --------------------------
**  Get if an AI town is threatened (if it is okay to funnelTroops away from it).
**  Uses @SadnessPower's plugin to detect if safe or not. Thanks to @SadnessPower for this!
**	If it is unsafe, the town is flagged unsafe for (HUAI_UNSAFETOWN_DAYS) days.
!?FU(huAI_IsTownSafe);
    !#VA(town:x);
    !#VA(returnBool:x);					//OUT: 0 if unsafe, 1 if safe.
	
	!!VR(returnBool):S(TRUE);			//Default return true.
	!!VR(day:y):Sc;     				//Get day.
	
	!!if&(day)=i^huAI_townLastUnsafe_%(town)^:;					//Check if we already flagged this town as unsafe today.
		!!VR(returnBool):S(FALSE);								//If we did there is nothing left to do, so exit.
		!!FU:E;
	!!en:;
	
	!!SN:L^HumanAI.era^/?(plugin:y);							//Use plugin to check if town is threatened. Thanks to SadnessPower for this plugin and guidance for its use.
	!!SN:A(plugin)/^isFunnelTroopsSafeForTown^/?(address:y);	//Function from plugin to check if there are threats to the town before funnelling away.
	
	!!SN:E(address)/1/(town);
	!!VR(savedv1:y):Sv1;										//Store old v1 value.
	!!VR(isFunnelTroopsSafe:y):Sv1;                         	//Get if it is safe to funnel troops away from the town.
	!!VRv1:S(savedv1);											//Restore old v1 value.
	
	!!if&(isFunnelTroopsSafe)=(FALSE):;
		!!VR(returnBool):S(FALSE);
		!!VRi^huAI_townLastUnsafe_%(town)^:S(day);				//Flag this town as unsafe for extra days, since it was unsafe.
	!!el&i^huAI_townLastUnsafe_%(town)^>0:;
		!!VR(dayDiff:y):S(day)-i^huAI_townLastUnsafe_%(town)^;	//If it was safe, we still need to check if the town was flagged unsafe recently.
		!!if&(dayDiff)<=(HUAI_UNSAFETOWN_DAYS):;				//If it was, we still return unsafe and update the flag to the current day.
			!!VR(returnBool):S(FALSE);							//Return false if it was flagged unsafe within (HUAI_UNSAFETOWN_DAYS).
			!!VRi^huAI_townLastUnsafe_%(town)^:S(day);			//Update this town's unsafe flag to the current day.
		!!el:;
			!!VRi^huAI_townLastUnsafe_%(town)^:S0;				//If the town is safe AND it was not flagged unsafe recently, clear its var for being unsafe.
		!!en:;
	!!en:;
	
**  --------------------------
    
    
    
**  --------------------------
**  Can any human player see passed hero(es). returns 1 if yes, else returns 0.
!?FU(huAI_CanPlayerSee);
    !#VA(firstHero:x);
    !#VA(secondHero:x);                 //Optional, use -1 to ignore.
    !#VA(firstHeroOutput:x);
    !#VA(secondHeroOutput:x);
    
    !!VR(firstHeroOutput):S(FALSE);     //Default not visible.
    !!VR(secondHeroOutput):S(FALSE);
    
    !!FU&i^huAI_funnelTroops_whileVisible^=(TRUE):E;            //Force return false if funnel always option is enabled, which results in always funneling.
    
    !!VR(visionBitToCheck:y):S1;                                //Bit to check for vision on tile. This is 1/2/4/8/16/32/64/128 for each player, respectively.
    !!re i/(PLAYER_FIRST)/(PLAYER_LAST):;
        !!OW:Ii/?(isAI:y)/?(isKilled:y);                        //Get if looped player is AI/killed.
        
        !!if&(isAI)=0/(isKilled)=0:;                            //Only continue if looped player is human and alive.
            !!if&(firstHeroOutput)=0:;
                !!HE(firstHero):P?(x:y)/?(y:y)/?(z:y)//0;       //get coords of hero.
                !!TR(x)/(y)/(z):V?(visionBits:y);               //Get bits of who sees this location.
                !!VR(visionBits):&(visionBitToCheck);           //Check if player sees it.
                !!if&(visionBits)>0:;
                    !!VR(firstHeroOutput):S(TRUE);              //If yes, set return value.
                !!en:;
            !!en:;
            !!if&(secondHeroOutput)=0/(secondHero)>-1:;
                !!HE(secondHero):P?(x:y)/?(y:y)/?(z:y)//0;      //get coords of hero.
                !!TR(x)/(y)/(z):V?(visionBits:y);               //Get bits of who sees this location.
                !!VR(visionBits):&(visionBitToCheck);           //Check if player sees it.
                !!if&(visionBits)>0:;
                    !!VR(secondHeroOutput):S(TRUE);             //If yes, set return value.
                !!en:;
            !!en:;
        !!en:;
        
        !!if&(firstHeroOutput)=1/(secondHeroOutput)=1:;
            !!FU:E;                                             //Exit since we know both heroes are visible, there is no need to keep checking.
        !!en:;
        
        !!VR(visionBitToCheck):*2;                              //set to bit for next player. This needs to happen even if the player was a human/not alive.
    !!en:;
**  --------------------------
    
    
    
**  --------------------------
**  Send troops from donorHero to receivingHero.
**  This is done by looping donorHero's army slots, and using a nested loop to see if it matches any of receivingHero's army slots.
**  Failing that, HE:C2 is used to offer the troops to AI even if it did not match any of receivingHero's army. If receivingHero
**  dismisses troops to accept those offered, we give the dismissed troops to donorHero, which emulates a "trade."
!?FU(huAI_SendTroops);
    !#VA(donorType:x);                  //Same as types for EX:C. 0=heroID, 1=heroXYZ, 2=townXYZ, 3=mineXYZ, 4=garrisonXYZ.
    !#VA(donorID:x);                    //Only needed if using armyType = 0 (heroID).
    !#VA(x:x);                          //xyz only needed if using armyType > 0.
    !#VA(y:x);
    !#VA(z:x);
    !#VA(receivingHero:x);
    !#VA(armyRemains:x);                //OUT: returns 1 if donorHero has any army remaining after sending troops. We use this to know if we need to give the donorHero a troop to prevent 0 army.
    
    !!VR(armyRemains):S(FALSE);
    
    !!re (donorSlot:y)/(ARMY_SLOT_FIRST)/(ARMY_SLOT_LAST):;
        
        !!FU(huAI_GetArmy):P(donorType)/(donorID)/(x)/(y)/(z)/(donorSlot)/?(monType:y)/?(monCount:y)/?(donorMonXP:y);      //Get mon info in donorID's army slot.
        !!co|(monType)<=(NO_MON)/(monCount)<=0;                         //co if this slot is empty.
        
        !!MA:L(monType)/?(monTier:y);                                   //get tier of troop
        !!if&(monTier)<=(HUAI_SENDTROOPS_LOWTIER):;
            !!VR(armyRemains):S(TRUE);                                  //We will always keep 1 of low tier troops, so we know army remains.
            !!co&(monCount)=1:;                                         //Don't send if only one troop remaining of low tier.
            !!FU(huAI_SetArmy):P(donorType)/(donorID)/(x)/(y)/(z)/(donorSlot)/(monType)/-1/-1;      //If we are sending, reduce count by 1, so that one fewer is given to receivingHero via EX:C. Afterward we will add this troop back.
            !!VR(monCount):-1;
        !!en:;
        
        !!FU(huAI_SendTroops_Internal):P(donorType)/(donorID)/(x)/(y)/(z)/(receivingHero)/(monType)/(monCount)/(donorSlot)/?(donorSuccess:y);      //Send troops to a matching existing stack, and store receiving hero's army to potentially trade.
        !!if&(donorSuccess)=(TRUE):;
            !!if&(monTier)<=(HUAI_SENDTROOPS_LOWTIER):;
                !!FU(huAI_SetArmy):P(donorType)/(donorID)/(x)/(y)/(z)/(donorSlot)/(monType)/1;      //If donation is successful for low tier troop, reset donorID count of troop to 1 (we must do this since we used EX:C to combine stacks).
                !!if&(donorType)>0:;
                    !!EX(x)/(y)/(z)/(donorSlot)/(donorType):E(donorMonXP);                          //Give the donor stack XP back to the 1 troop.
                !!el:;
                    !!EX(donorID)/(donorSlot):E(donorMonXP);                                        //Give the donor stack XP back to the 1 troop.
                !!en:;
            !!en:;
            !!co:;                                                                                  //co if we successfully added this stack to an existing stack.
        !!el&(monTier)<=(HUAI_SENDTROOPS_LOWTIER):;
            !!FU(huAI_SetArmy):P(donorType)/(donorID)/(x)/(y)/(z)/(donorSlot)/(monType)/-1/1;       //If donation of low-tier troop failed, give back the one troop we removed before.
            !!VR(monCount):+1;
        !!en:;
        
        //If we did *not* send troops to a similar stack in receivingHero's army, try to offer the troops to the AI instead, using HE:C2:
        
        //!HE(donorID):B0/?(donorHeroName:z);               TEST - Donor hero name
        //!HE(donorID):O?(donorHeroOwner:y);                TEST
        //!HE(receivingHero):O?(receivingHeroOwner:y);      TEST
        //!SN:H^monname^/(monType)/0/?(monTypeStr:z);       TEST - Name of troop to send.
        //!IF:L^%(donorHeroName) asking if %(receivingHeroName) wants (%(monCount)) %(monTypeStr)...^;      TEST
        
        !!HE(receivingHero):C2/(monType)/(monCount)/0/(donorMonXP)/0;                               //Offer AI the troop stack, with XP retained.
        !!FU(huAI_HasTroop):P(receivingHero)/(monType)/?(hasTroop:y)/?(receivingSlot:y);            //(donorSuccess)=1 if hero accepted the troops. (receivingSlot)=slot the troop was placed in.
        !!if&(hasTroop)=(FALSE):;
            !!VR(armyRemains):S(TRUE);                                                              //Troop was not accepted, so we know donorID will still have army.
            !!co:;                                                                                  //co if the troop was not found (not accepted)
        !!en:;
        
        //Troop was accepted as a new stack so also send stackArts and trade replaced stack (if any):
        !!VR(oldMon:y):Si^huAI_ReceivingHero_Mon_%(receivingSlot)^;
        !!VR(oldMonCount:y):Si^huAI_ReceivingHero_MonCount_%(receivingSlot)^;                       //Get old mon type and count, so we can give it to donorID to facilitate a "trade."
        !!if&(oldMon)>(NO_MON)/(oldMonCount)>0:;                                                    //If receiving hero replaced an old troop to accept, set donor's sent troop slot to be the receiving hero's old troop.
            !!VR(oldMonXP:y):Si^huAI_ReceivingHero_MonXP_%(receivingSlot)^;
            !!VR(oldMonArts:y):Si^huAI_ReceivingHero_MonArts_%(receivingSlot)^;
            !!FU(huAI_SetArmy):P(donorType)/(donorID)/(x)/(y)/(z)/(donorSlot)/(oldMon)/(oldMonCount)/-1/(oldMonXP);
            !!FU(huAI_AddArtToBackpack)&(oldMonArts)>0:P(receivingHero)/(ART_WARLORDS_BANNER)/(NO_ART_MOD)/(oldMonArts);    //If receivingHero's old mon had a stack art, add it to the receivingHero instead of sending it away. Art sending logic will handle it.
            //!SN:H^monname^/(oldMon)/0/?(oldMonTypeStr:z);   TEST
            //!IF:L^%(donorHeroName)[%(donorHeroOwner)] TRADED: (%(monCount)) %(monTypeStr) for (%(oldMonCount)) %(oldMonTypeStr) to %(receivingHeroName)[%(receivingHeroOwner)].^;       TEST
        !!el:;
            !!if&(monTier)<=(HUAI_SENDTROOPS_LOWTIER):;                                             //If receiving hero did not replace a troop, remove the donor's troops.
                !!FU(huAI_SetArmy):P(donorType)/(donorID)/(x)/(y)/(z)/(donorSlot)/(monType)/1;      //If it was low-tier troop, remove all but one.
            !!el:;
                !!FU(huAI_SetArmy):P(donorType)/(donorID)/(x)/(y)/(z)/(donorSlot)/(NO_MON)/0;       //Else, just remove donor's sent troop count.
            !!en:;
            //!IF:L^%(donorHeroName)[%(donorHeroOwner)] sent NEW stack (%(monCount)) %(monTypeStr) to %(receivingHeroName)[%(receivingHeroOwner)].^;    TEST
        !!en:;
        //Not necessary to update huAI_ReceivingHero... vars here, since they are always updated by huAI_SendTroops_Internal before code reaches this block, where they are used.
    !!en:;
    
    
!?FU(huAI_SendTroops_Internal);
**    Send troops from donor if receiving hero has the troop, its upgrade, or its degrade.
**    Also store the troops that receiving hero has, so that we can potentially facilitate a trade of stacks back in the parent function.
    !#VA(donorType:x);                  //Same as types for EX:C. 0=heroID, 1=heroXYZ, 2=townXYZ, 3=mineXYZ, 4=garrisonXYZ.
    !#VA(donorID:x);                    //Only needed if using armyType = 0 (heroID).
    !#VA(x:x);                          //xyz of donor only needed if using armyType > 0.
    !#VA(y:x);
    !#VA(z:x);
    !#VA(receivingHero:x);
    !#VA(donorMon:x);
    !#VA(donorMonCount:x);
    !#VA(donorArmySlot:x);              //0-6
    !#VA(donorSuccess:x);               //OUT: Returns 1 if success.
        
    !!VR(donorSuccess):S(FALSE);        //Default return failure.
	
	!!HE(receivingHero):O?(owner:y);	//Get receiving hero's owner.
    
    !!re (receivingSlot:y)/(ARMY_SLOT_FIRST)/(ARMY_SLOT_LAST):;
    
        !!HE(receivingHero):C0/(receivingSlot)/?(existingMon:y)/?(existingMonCount:y);        //Get Receving Hero's troop in this slot. (existingMon)=receiving hero's troop. (existingMonCount=receiving hero's troop's count.
        
        !!VRi^huAI_ReceivingHero_Mon_%(receivingSlot)^:S(existingMon);
        !!VRi^huAI_ReceivingHero_MonCount_%(receivingSlot)^:S(existingMonCount);
        
        !!co|(existingMon)<0/(existingMonCount)<=0:;                            //co if nothing in this slot.
        
        !!EX(receivingHero)/(receivingSlot):E?(monXP:y);                        //Get stack XP.
        !!EX(receivingHero)/(receivingSlot):R/156//?(monArtCount:y);            //Get how many Warlord's Banners are held (that's the only supported art).
        !!VRi^huAI_ReceivingHero_MonXP_%(receivingSlot)^:S(monXP);
        !!VRi^huAI_ReceivingHero_MonArts_%(receivingSlot)^:S(monArtCount);
        
        //Era framework function to find mon degrade mentions that is not 100% accurate,
        //and it is slow. Due to this, we use a simple but fast method to find degrade.
        //This is still not accurate, but it is efficient and good enough for this.
        //Minus 1 to troop index, then get its upgrade. If they match, degrade was found.
        !!VR(degradedMon:y):S-1;
        !!if&i^huAI_funnelTroops_upgradeUnits^>0&(donorMon)>0:;          		//Don't attempt this if it's creature index 0, else we'll error since -1 is not valid.
            !!VR(degradedMon:y):S(donorMon)-1;                                  //(degradedMon) might become *de*graded version of the troop passed.
            !!FU(GetUpgradedMonster):P(degradedMon)/?(degradedMonUpgrade:y);    //Get upgrade of degraded mon.
            !!VR(degradedMon)&(degradedMonUpgrade)<>(donorMon):S-1;             //If the upgrade of degraded mon is *not* the original mon, then this method of finding degrade failed.
        !!en:;
        
        !!FU(GetUpgradedMonster):P(donorMon)/?(upgradedMon:y);                  //Get troop upgrade, if it exists.
        
        !!if|(existingMon)=(donorMon)/(existingMon)=(degradedMon)/(existingMon)=(upgradedMon):;        //Hero has passed troop, it's degrade, or its upgrade.
            
			!!VR(paymentSuccess:y):S(TRUE);			//Set paymentSuccess default TRUE, so the check succeeds if the config option is not used.
			
            //!IF:M^donorMon%(donorMon), existingMon%(existingMon), degradedMon%(degradedMon), upgradedMon%(upgradedMon)^;       TEST
            !!if&(existingMon)=(degradedMon):;
				!!if&i^huAI_funnelTroops_upgradeUnits^=2:;			//If funnelTroops setting is 2, then only upgrade if the cost can be payed.
					!!FU(huAI_SendTroops_CanPayForUpgrade):P(owner)/(existingMon)/(donorMon)/(existingMonCount)/(TRUE)/?(paymentSuccess);	//Pay for upgrade if possible.
				!!en:;
				!!if&(paymentSuccess)=(TRUE):;
					!!HE(receivingHero):P?(receivingX:y)/?(receivingY:y)/?(receivingZ:y);
					!!FU(huAI_SetArmy):P0/(receivingHero)/(receivingX)/(receivingY)/(receivingZ)/(receivingSlot)/(donorMon)/-1;     //Donor has upgraded troops, and ours are degrade, so upgrade our troops before combining stacks.
				!!en:;
            !!el:;
                !!if&(existingMon)<>(donorMon):;
					!!if&i^huAI_funnelTroops_upgradeUnits^=2:;			//If funnelTroops setting is 2, then only upgrade if the cost can be payed.
						!!FU(huAI_SendTroops_CanPayForUpgrade):P(owner)/(existingMon)/(donorMon)/(donorMonCount)/(TRUE)/?(paymentSuccess);	//Pay for upgrade if possible.
					!!en:;
					!!if&(paymentSuccess)=(TRUE):;
						!!FU(huAI_SetArmy):P(donorType)/(donorID)/(x)/(y)/(z)/(donorArmySlot)/(existingMon)/-1;    //We are using receiving hero's monID, so convert donorHero's monID to that one before combining stacks.
					!!en:;
                !!en:;
            !!en:;
            //!EX(receivingHero)/(receivingSlot):T?(extReceivingType:y);            TEST
            //!EX(x)/(y)/(z)/(donorArmySlot)/(donorType):T?(extDonorType:y);        TEST
            //!IF&(extReceivingType)<>(extDonorType):M^[hecReceivingType%(existingMon) extReceivingType%(extReceivingType)], [hecDonorType%(donorMon) extDonorType%(extDonorType)]^;           TEST
			!!if&(paymentSuccess)=(TRUE):;				//Only continue if payment was successful (or no payment was required).
				!!if&(donorType)>0:;
					!!EX(receivingHero)/(receivingSlot):C(donorType)/(x)/(y)/(z)/(donorArmySlot);     //combine donor's mon into receivingHero's mon.
				!!el:;
					!!EX(receivingHero)/(receivingSlot):C(donorType)/(donorID)/(donorArmySlot);     //combine donor's mon into receivingHero's mon.
				!!en:;
				!!VR(donorSuccess):S(TRUE);             //Return success.
				!!FU:E;                                 //Exit since we're done with this troop.
			!!en:;
        !!en:;
        
    !!en:;
	
	
!?FU(huAI_SendTroops_CanPayForUpgrade);
**  Determine if passed player can afford to upgrade a stack.
**  If (doPayment) is 1, resources are deducted from (owner) if they can pay.
	!#VA(owner:x);				//Player whose resources will be checked.
	!#VA(monID:x);				//ID of mon to upgrade.
	!#VA(targetMonID:x);		//The ID to upgrade monID into.
	!#VA(monCount:x);			//The number of monID.
	!#VA(doPayment:x);			//If TRUE, then resources will be deducted from (owner).
	!#VA(returnBool:x);			//OUT: Returns TRUE if (owner) can pay to upgrade (monCount) of (monID) into (targetMonID). Else FALSE.
	
    !!VR(returnBool):S(TRUE);        //Default return true.
	
	!!re (count:y)/0/1:;									//Loop twice. Once to check if we can pay, second time to actually pay.
		!!re (res:y)/(RES_FIRST)/(RES_LAST_SOD):;			//Loop every resource.
			!!MA:C(monID)/(res)/?(monCost:y);				//Get mon cost for this resource.
			!!MA:C(targetMonID)/(res)/?(upgrCost:y);		//Get upgrade mon cost for this resource.
			!!VR(upgrCost):-(monCost);						//Get cost of upgrading mon (difference between mon and its upgrade).
			!!VR(upgrCost):*(monCount);						//Multiply cost by number of mons to upgrade.
			!!VR(upgrCost)&(upgrCost)<0:S0;					//If upgrCost is negative, something went wrong. Set cost to zero.
			!!if&(upgrCost)>0:;								//If cost is > 0, we need to see if owner can pay it.
				!!OW:R(owner)/(res)/(ownerRes:y);			//Get amount of resource that owner has.
				!!if&(count)=0:;							//If count = 0, this loop is for determining if owner can pay for the upgrade.
					!!if&(ownerRes)<(upgrCost):;			//If owner does not have enough, then owner cannot pay and we return false.
						!!VR(returnBool):S(FALSE);
						!!FU:E;
					!!en:;
				!!el&(doPayment)=(TRUE):;				//Else if we want to do payment, this loop is for paying the cost. We know owner can pay the cost at this point.
					!!VR(ownerRes):-(upgrCost);			//Subtract cost to find the new value for owner's resource.
					!!OW:R(owner)/(res)/(ownerRes);		//Set owner's resource to new value.
				!!en:;
			!!en:;
		!!en:;
	!!en:;
	
**  --------------------------
    
    
    
**  --------------------------
**  Need to use a differentiation function because EX:A and EX:T don't
**  allow setting monType as stated in docs- they only get.
**  Also, preserve stack XP.
**  Testing revealed issues with coordinate-based references for heroes,
**  as sometimes the wrong hero is returned.
!?FU(huAI_SetArmy);
    !#VA(armyType:x);       //Same as types for EX:C. 0=heroID, 1=heroXYZ, 2=townXYZ, 3=mineXYZ, 4=garrisonXYZ.
    !#VA(armyID:x);         //Only needed if using armyType = 0 (heroID).
    !#VA(x:x);              //xyz only needed if using armyType > 0.
    !#VA(y:x);
    !#VA(z:x);
    !#VA(armySlot:x);       //0-6.
    !#VA(monID:x);
    !#VA(monCount:x);       //If set to -1, count is not changed.
    !#VA(monCountAdd:x);    //Optional. If provided this is added to stack amount.
    !#VA(setXP:x);          //Optional. If provided and > -1, monXP is set to this.
    
    !!FU:A?(numArgs:y);
    
    
    !!if&(numArgs)>=10/(setXP)>-1:;
    !!el:;
        !!if&(armyType)>0:;
            !!EX(x)/(y)/(z)/(armySlot)/(armyType):E?(monXP:y);      //Store stack XP before change.
        !!el:;
            !!EX(armyID)/(armySlot):E?(monXP:y);                    //Store stack XP before change.
        !!en:;
    !!en:;
    
    //Change mon at slot. Different receivers used depending on armyType:
    !!if&(armyType)=0:;                                         //Type 0, heroes by ID.
        !!if&(monCount)>-1:;
            !!HE(armyID):C0/(armySlot)/(monID)/(monCount);
        !!el:;
            !!HE(armyID):C0/(armySlot)/(monID)/d;
        !!en:;
        !!HE(armyID)&(numArgs)>=9:C0/(armySlot)/(monID)/d(monCountAdd);      //Add to stack count if desired.
    !!el&(armyType)=1:;                                         //Type 1, heroes at xyz (unstable, sometimes wrong heroes are returned with xyz references).
        //!HE(x)/(y)/(z):O?(owner:y);                               TEST
        //!HE(armyID):B0/?(armyIDName:z);                           TEST
        //!HE(x)/(y)/(z):B0/?(heroName:z);                          TEST
        //!HE(x)/(y)/(z):N?(heroByPos:y);                           TEST
        //!HE(heroByPos):B0/?(heroByPosName:z);                     TEST
        //!HE(x)/(y)/(z):C0/(armySlot)/?(hecMonID:y)/d;             TEST
        //!EX(x)/(y)/(z)/(armySlot)/(armyType):T?(extMonID:y);      TEST
        //!IF:M^%(heroName) is owned by player%(owner). %(armyIDName) was expected. heroByPos%(heroByPos) is %(heroByPosName)^;      TEST
        //!IF&(owner)=4:M^monType before set to %(monID) he:C[%(hecMonID)], ex:T[%(extMonID)]^;      TEST
        !!if&(monCount)>-1:;
            !!HE(x)/(y)/(z):C0/(armySlot)/(monID)/(monCount);                   //If desired, set stack count.
        !!el:;
            !!HE(x)/(y)/(z):C0/(armySlot)/(monID)/d;
        !!en:;
        !!HE(x)/(y)/(z)&(numArgs)>=9:C0/(armySlot)/(monID)/d(monCountAdd);      //Add to stack count if desired.
        //!HE(x)/(y)/(z):C0/(armySlot)/?(hecMonID:y)/d;             TEST
        //!EX(x)/(y)/(z)/(armySlot)/(armyType):T?(extMonID:y);      TEST
        //!IF&(owner)=4:M^monType after set to %(monID) he:C[%(hecMonID)], ex:T[%(extMonID)]^;      TEST
    !!el&(armyType)=2:;                                         //Type 2, towns.
        !!if&(monCount)>-1:;
            !!CA(x)/(y)/(z):M2/(armySlot)/(monID)/(monCount);
        !!el:;
            !!CA(x)/(y)/(z):M2/(armySlot)/(monID)/d;
        !!en:;
        !!CA(x)/(y)/(z)&(numArgs)>=9:M2/(armySlot)/(monID)/d(monCountAdd);
    !!el&(armyType)=3:;                                         //Type 3, mines.
        !!if&(monCount)>-1:;
            !!MN(x)/(y)/(z):M(armySlot)/(monID)/(monCount);
        !!el:;
            !!MN(x)/(y)/(z):M(armySlot)/(monID)/d;
        !!en:;
        !!MN(x)/(y)/(z)&(numArgs)>=9:M(armySlot)/(monID)/d(monCountAdd);
    !!el&(armyType)=4:;                                         //Type 4, garrisons.
        !!if&(monCount)>-1:;
            !!GR(x)/(y)/(z):G(armySlot)/(monID)/(monCount);
        !!el:;
            !!GR(x)/(y)/(z):G(armySlot)/(monID)/d;
        !!en:;
        !!GR(x)/(y)/(z)&(numArgs)>=9:G(armySlot)/(monID)/d(monCountAdd);
    !!en:;
    
    !!if&(numArgs)>=10/(setXP)>-1:;
        !!if&(armyType)>0:;
            !!EX(x)/(y)/(z)/(armySlot)/(armyType):E(setXP);     //set to desired XP.
        !!el:;
            !!EX(armyID)/(armySlot):E(setXP);                   //set to desired XP.
        !!en:;
    !!el:;
        !!if&(armyType)>0:;
            !!EX(x)/(y)/(z)/(armySlot)/(armyType):E(monXP);     //Give XP back.
        !!el:;
            !!EX(armyID)/(armySlot):E(monXP);                   //Give XP back.
        !!en:;
    !!en:;
    
    
    
**  Wrapper for army getters because EX:A is too inconsistent.
!?FU(huAI_GetArmy);
    !#VA(armyType:x);       //Same as types for EX:C. 0=heroID, 1=heroXYZ, 2=townXYZ, 3=mineXYZ, 4=garrisonXYZ.
    !#VA(armyID:x);         //Only needed if using armyType = 0 (heroID).
    !#VA(x:x);              //xyz only needed if using armyType > 0.
    !#VA(y:x);
    !#VA(z:x);
    !#VA(armySlot:x);       //0-6.
    !#VA(monID:x);          //OUT. ID of mon at slot.
    !#VA(monCount:x);       //OUT. Count of mon at slot.
    !#VA(monXP:x);          //OUT. Stack xp of mon at slot.
    
    
    !!if&(armyType)=0:;
        !!EX(armyID)/(armySlot):E?(monXP);
    !!el:;
        !!EX(x)/(y)/(z)/(armySlot)/(armyType):E?(monXP);
    !!en:;
    
    
    //Get mon data at slot. Different receivers used depending on armyType:
    !!if&(armyType)=0:;                                         //Type 0, heroes by ID.
        !!HE(armyID):C0/(armySlot)/?(monID)/?(monCount);
    !!el&(armyType)=1:;                                         //Type 1, heroes at xyz (unstable, sometimes wrong heroes are returned with xyz references).
        !!HE(x)/(y)/(z):C0/(armySlot)/?(monID)/?(monCount);
    !!el&(armyType)=2:;                                         //Type 2, towns.
        !!CA(x)/(y)/(z):M2/(armySlot)/?(monID)/?(monCount);
    !!el&(armyType)=3:;                                         //Type 3, mines.
        !!MN(x)/(y)/(z):M(armySlot)/?(monID)/?(monCount);
    !!el&(armyType)=4:;                                         //Type 4, garrisons.
        !!GR(x)/(y)/(z):G(armySlot)/?(monID)/?(monCount);
    !!en:;
**  --------------------------
    
    
**  --------------------------
!?FU(huAI_HasTroop);
**  Determine if hero has monType in any slot of their army.
    !#VA(hero:x);
    !#VA(monType:x);
    !#VA(monFound:x);               //Returns 1 if the troop was found.
    !#VA(monFoundSlot:x);           //Returns slot the troop was found in.
    
    !!VR(monFound):S(FALSE);
    
    !!re (heroArmySlot:y)/(ARMY_SLOT_FIRST)/(ARMY_SLOT_LAST):;
    
        !!HE(hero):C0/(heroArmySlot)/?(slotMon:y)/?(slotCount:y);        //Get Receving Hero's troop in this slot. y=4 receiving hero's troop.
        
        !!if&(slotMon)=(monType):;                      //If the looped troop is = the troop we're searching for.
            !!VR(monFound):S(TRUE);                     //Set return value.
            !!VR(monFoundSlot):S(heroArmySlot);
            !!FU:E;                                     //Exit since we're done.
        !!en:;
        
    !!en:;
**    --------------------------
    
    