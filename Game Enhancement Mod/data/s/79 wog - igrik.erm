ZVSE2

; --------------------------------------------------------------------------------------------------
; --------------------------------------------------------------------------------------------------
*                       [BATTLE SCRREN - scripts for the battles]
; --------------------------------------------------------------------------------------------------
; --------------------------------------------------------------------------------------------------

// Fix wide units passing their turns when attempting to move to their current position
; by Archer30
; This is a problem of game bug fixes extended.dll. When a wide unit attempt to move to its current position, the turn is passed but nothing else happens
; This script prevents turn passing in this case
; The script should be removed if igrik managed to fix the issue in game bug fixes extended.dll
; Discussion: http://wforum.heroes35.net/showthread.php?tid=5717&pid=139143#pid139143
!?FU(OnBeforeBattleAction);
; Exit if not moving
!!BG:A?(action:y);
!!FU&(action)<>(BATTLE_ACTION_WALK):E;

; Exit if not wide unit
!!BMi^battle_acting_stack^:F?(flags:y);
!!VR(isWide:y):S(flags:y) &(MON_FLAG_WIDE);
!!FU&(isWide)=(FALSE):E;

; Exit if not moving to the current position
!!BG:D?(targetPos:y);
!!BMi^battle_acting_stack^:P?(currPos:y);
!!FU&(targetPos)<>(currPos):E;

; Cancel the action
!!VRi^gem_wideWalkingStackPlusOne^:Si^battle_acting_stack^ +1;
!!BG:A(BATTLE_ACTION_SKIP);

!?FU(OnBeforeBattleStackTurn)&i^gem_wideWalkingStackPlusOne^;
!#VA(activeStack:x);

!!VR(activeStack):Si^gem_wideWalkingStackPlusOne^ -1;
!!BM(activeStack):Fd~(MON_FLAG_ACTED);
!!VRi^gem_wideWalkingStackPlusOne^:S0;


** open heroscreens in the battle by right click
!?FU(OnBattleScreenMouseClick)&i^mouse_action^=(MOUSE_RMB_PRESSED)/i^mouse_battleHex^>=252/i^mouse_battleHex^<=253;
  ; Check if it is real MP (excluding hot seat)
  !!VR(isRealMp:y):S(FALSE);
  !!UN:V?t/?t/?t/?t/?(gameType:y);

  !!if&(gameType)<>0/(gameType)<>3;
    !!VR(isRealMp):S(TRUE);
  !!en;

  !!VR(side:y):Si^mouse_battleHex^ -252;
  !!OW:Cd/?(clickOwner:y);
  !!FU&(side)=(BATTLE_RIGHT)/i^battle_hero_1^=(NO_HERO):E;

  !!if&i^gem_enemy_window_option_%(clickOwner)^/(isRealMp)=(FALSE);
    !!VR(showHeroDlg:y):S(TRUE);
  !!el&i^gem_window_option_%(clickOwner)^/i^battle_owner_%(side)^=(clickOwner);
    !!VR(showHeroDlg:y):S(TRUE);
  !!en;

  !!if&(showHeroDlg);
    !!FU(gem_ShowHeroScreen):Pi^battle_hero_%(side)^/(TRUE);
    !!CM:R0;
  !!en;


; by Archer30
; L - Load with confirmation
; Ctrl-L - Load without confirmation
; Works for battlefield and adventure map

; This constant must be removed if EEF adds it 
!#DC(GAME_MENU_TARGET_LOAD_GAME) = 102;

; Ctrl=L to enter loading screen without confirmation
; Adventure map

!?FU(OnKeyPressed_AdvMap)&i^key_ctrl^/i^key^=(KEY_L);
!#VA(key:x) (preventDefault:x);
!!VR(preventDefault):S(TRUE);
!!SN:F^FastQuitToGameMenu^/(GAME_MENU_TARGET_LOAD_GAME);

; Press L/Ctrl+l to enter loading screen with confirmation

; Battlefield
!?FU(OnKeyPressed_Battle)&i^key^=(KEY_L);
!#VA(key:x) (preventDefault:x);
!!VR(preventDefault):S(TRUE);

!!if&i^key_ctrl^=0;
  !!FU(GetTextFileString):P^genrltxt^/69/?(loadGameStr:z);
  !!IF:Q2/(loadGameStr);
  !!FU&-2:E;
!!en;
!!SN:F^FastQuitToGameMenu^/(GAME_MENU_TARGET_LOAD_GAME);


; --------------------------------------------------------------------------------------------------

; --------------------------------------------------------------------------------------------------
; --------------------------------------------------------------------------------------------------
*                 [Adventure Map  - scripts for adventure map]
; --------------------------------------------------------------------------------------------------
; --------------------------------------------------------------------------------------------------


** script that displays the distance to the end of the route is triggered by Alt/Alt + RMB on the map:
; Ideally this script should be executed as early as possible
!?FU(OnAdventureMapRightMouseClick)&i^mouse_item^=(ITEM_ADVMAP_ADVENTURE_MAP)/i^key_leftAlt^;

  !!OW:Cd/?(clickedPlayer:y) A(clickedPlayer)/?(heroId:y);

  !!if&(heroId)<>(NO_HERO);
    !!CM:R0;
    !!HE(heroId):P?s/?t/?k;
    ; If clicking on the hero, open the hero screen of the current hero
    !!if&i^mouse_mapX^=s/i^mouse_mapY^=t/i^mouse_mapZ^=k;
      !!FU(gem_ShowHeroScreen):P(heroId)/(TRUE);
    ; If anything else, calculate the distance of the location
    !!el;
      !!FU(gem_MovePointsLeft):Pi^mouse_mapX^/i^mouse_mapY^/i^mouse_mapZ^/(heroId)/?(pathLenght:y)/?(heroMp:y); [;]
      !!SN&(pathLenght)<1:T^gem.map.route_1^/?z-1/^hero_name^/z3; [/^path_lenght^/(pathLenght)/^hero_movepoints^/(heroMp);]
      !!SN&(pathLenght)>=1/(heroMp)<0:T^gem.map.route_2rmb^/?z-1/^hero_name^/z3/^path_lenght^/(pathLenght)/^hero_movepoints^/(heroMp); [/^days_requires^/i^way_days^;]
      !!SN&(pathLenght)>=1/(heroMp)>=0:T^gem.map.route_3rmb^/?z-1/^hero_name^/z3/^path_lenght^/(pathLenght)/^hero_movepoints^/(heroMp);  
      !!IF:M0/4/^%z-1^;
    !!en;

    ; Prevent the other script from executing so that there won't be double dialogs
    !!SN:Q;
  !!en;




!?FU(OnAdventureMapTileHint)&999;
  !#VA(x:x) (y:x) (z:x);                [Object entrance coordinates]
  !#VA(objType:x) (objSubtype:x);       [Type and subtype of object. For active hero it's object under hero.]
  !#VA(tileX:x) (tileY:x) (tileZ:x);    [Real tile coordinates.]
  !!FU(GetKeyModsState):P;
  !!if&i^key_leftAlt^=0;
    !!OW:C?(currPlayer:y)/?(clickedPlayer:y) A(clickedPlayer:y)/?(activeHero:y);

    !!VR(found:y):S(FALSE);

    !!if&(objType)=(OBJ_HERO);          [/(objType)=(OBJ_FIRST);]

      !!HE(x)/(y)/(z):P?(xH:y)/?(yH:y)/?(zH:y) O?(heroOwner:y);
      !!if&(xH)=(tileX)/(yH)=(tileY)/(zH)=(tileZ)/(heroOwner)=(clickedPlayer);
        !!VR(found):S(TRUE);
      !!en;
    !!el&(activeHero)<>(NO_HERO);
      !!HE(activeHero):P?(xH:y)/?(yH:y)/?(zH:y);
      !!if&(xH)=(tileX)/(yH)=(tileY)/(zH)=(tileZ);
        !!VR(found):S(TRUE);
      !!en;
    !!en;

    !!if&(found);
      !!HE(xH)/(yH)/(zH):G?(heroMovePoints:y) W?(heroMovePointsLesft:y)/1;
      !!MM:M?(currHint:z);
      !!VRs^gem_OriginalTileHint^:S(orHint:z);
      !!VRi^gem_OriginalTileHint^:S(TRUE);
      !!MM:M^%(currHint)  {%T(gem.map.mp_left)} %(heroMovePointsLesft) / %(heroMovePoints){)}^;
    !!en;
  !!el&i^GameplayEnhancementsPlugin_AdventureMapHints_AtHint^=0;

    !!if&(objType)<=(OBJ_WITCH_HUT)|(objType)=(OBJ_FREELANCERS_GUILD)/(objType)=(OBJ_QUEST_GUARD)/(objType)=(OBJ_TRADING_POST_2);
      !!OW:C?(currPlayer:y)/?(clickedPlayer:y);
      !!OW:A(clickedPlayer)/?(activeHero:y);

      !!if&(activeHero)>(NO_HERO)/(activeHero)<=(HERO_LAST_WOG);

        !!FU(gem_MovePointsLeft):P(x)/(y)/(z)/(activeHero)/?(pathLenght:y)/?(heroMp:y)/?(isMemoryIssue:y);
        !!FU&(isMemoryIssue)=1:E;
        !!MM:M?(orHint:z);
        !!VRs^gem_OriginalTileHint^:S(orHint:z);
        !!VRi^gem_OriginalTileHint^:S(TRUE);

        !!SN&(pathLenght)<1:T^gem.map.route_1^/?z-6/^hero_name^/z3/^path_lenght^/(pathLenght)/^hero_movepoints^/(heroMp);
        !!SN&(pathLenght)>=1/(heroMp)<0:T^gem.map.route_2^/?z-6/^hero_name^/z3/^path_lenght^/(pathLenght)/^hero_movepoints^/(heroMp); [/^days_requires^/i^way_days^;]
        !!SN&(pathLenght)>=1/(heroMp)>=0:T^gem.map.route_3^/?z-6/^hero_name^/z3/^path_lenght^/(pathLenght)/^hero_movepoints^/(heroMp); [;]
        !!MM:M^%z-6^;
      !!en;
    !!en;
  !!en;


!?FU(OnKeyPressed_AdvMap)&i^key^=(KEY_ALT)/999/i^key_down^;
  !!OW:Cd/?(clickedPlayer:y) A(clickedPlayer)/?(activeHero:y);
  !!if&(activeHero)>(NO_HERO)/(activeHero)<=(HERO_LAST_WOG);
    !!UN:X?(mapWidth:y)/?(isUnd:y);
    !!UN:C(ADV_MANAGER)/(UNC_INT)/?(advMgr:y);
    !!UN:C(advMgr)/232/2/?(x:y) C(advMgr)/234/2/?(y:y) C(advMgr)/235/1/?(z:y);
    
    !!if&(z)=(UNC_INT32);
      !!VR(z):F(FALSE)/(UNC_INT8);
      !!VR(y):-1024;
    !!en;

    !!if&(x)<=(mapWidth)/(y)<=(mapWidth);
      !!FU(gem_MovePointsLeft):P(x)/(y)/(z)/(activeHero)/?(pathLenght:y)/?(heroMp:y)/?(isMemoryIssue:y);


      !!if&(isMemoryIssue)<>(TRUE);
        !!MM:M?(orHint:z);
        !!VRs^gem_OriginalTileHint^:S(orHint:z);
        !!VRi^gem_OriginalTileHint^:S(TRUE);
        !!SN&(pathLenght)<1:T^gem.map.route_1^/?z-6/^hero_name^/z3/^path_lenght^/(pathLenght)/^hero_movepoints^/(heroMp);
        !!SN&(pathLenght)>=1/(heroMp)<0:T^gem.map.route_2^/?z-6/^hero_name^/z3/^path_lenght^/(pathLenght)/^hero_movepoints^/(heroMp); [/^days_requires^/i^way_days^;]
        !!SN&(pathLenght)>=1/(heroMp)>=0:T^gem.map.route_3^/?z-6/^hero_name^/z3/^path_lenght^/(pathLenght)/^hero_movepoints^/(heroMp); [;]
        !!FU(AdvMap_SetHint):Pz-6;
      !!en;


    !!en;

  !!en;

!?FU(OnKeyReleased_AdvMap)&i^key^=(KEY_ALT)/999/i^gem_OriginalTileHint^;
  !!FU(AdvMap_SetHint):Ps^gem_OriginalTileHint^;
  !!SN:W^gem_OriginalTileHint^;
  
!?FU(GetRealObjectOnMap);
; x1/x2/x3 - ????? ???? ? ???; ?x4/?x5 - ????????: ????? ????
  !!VRx4:S-1;  !!VRx5:S-1;
  !!UN:C6918840/4/?y1;
  !!VRy1:+92;
  !!UN:Cy1/4/?y2;
  !!SN:E4228816/2/y2/x1/x2/x3;
  !!VRy1:Sv1 +30;  !!UN:Cy1/2/?x4;
  !!VRy1:+4;       !!UN:Cy1/2/?x5;




//  script set correct hint for artifacts - by @Archer30
; SN:H^object^ was not used as for the compatibility with Emerald artifacts
!?FU(OnAdventureMapTileHint);
  !#VA(x:x) (y:x) (z:x) (objType:x) (objSubtype:x);

  !!FU&(objType)<>(OBJ_ARTIFACT):E;

  !!SN:H^art^/(objSubtype)/0/?z2;
  !!OB(x)/(y)/(z):H2;




!?FU(gem_MovePointsLeft);
  !#VA(x:x) (y:x) (z:x);                [Object entrance coordinates]
  !#VA(heroId:x) (path:x) (mPoints:x);
  !!HE(heroId):W?(heroMp:y)/1 B0/?z3;
  !!UN:X?(mapSize:y)/?(isDung:y);                      
  !!VR(tile:y):S(mapSize) *30 *(mapSize) *2 *(z);
  !!VR(mapSize): *(y) +(x);
  !!VR(mapSize): *30;
  !!UN:C6918868/4/?(tileStruct:y);      [6992D4]
  !!VR(tileStruct:y):+36;
  !!UN:C(tileStruct:y)/4/?(mapAddr:y);
  !!if&(mapAddr:y)=0;
    !!VRx7:S1;
    !!FU:E;
  !!en;
  !!VR(tile):+(mapSize) +(mapAddr:y) +24;
  !!UN:C(tile)/2/?(pathLength:y);
  !!VR(mPoints):S(heroMp:y)-(pathLength:y);
  !!VR(path):S(pathLength:y);


; --------------------------------------------------------------------------------------------------

** Script to select (make active) Hero on Adventure Map by Shift+Leftclick on Hero* (by PerryR)
** by Shift+Alt+Leftclick delete at the one moment (by daemon_n)

!?FU(OnAdventureMapLeftMouseClick)&i^mouse_item^=(ITEM_ADVMAP_ADVENTURE_MAP)/i^mouse_action^=(MOUSE_LMB_PRESSED)/999;
  !!OBi^mouse_mapX^/i^mouse_mapY^/i^mouse_mapZ^:T?(objectType:y) U?(objSubtype:y); [get type of clicked object]
  !!if&(objectType)=(OBJ_HERO);
    !!if&i^mouse_flags^=(MOUSE_FLAG_SHIFT)|i^mouse_flags^=33;
      !!OW:Cd/?(clickOwner:y) A(clickOwner)/?(activeHero:y);
      !!HEi^mouse_mapX^/i^mouse_mapY^/i^mouse_mapZ^:O?(heroOwner:y) N?(objSubtype:y);

      !!if&(heroOwner)=(clickOwner)/(activeHero)<>(objSubtype)/(objSubtype)>-1;
          !!HE(activeHero):Z?(struct:y);
          !!re i/0/7;
            !!OW:O(clickOwner)/i/?(heroInTable:y);

            !!if&(heroInTable)=(objSubtype);
              !!if&i^mouse_flags^=(MOUSE_FLAG_SHIFT);
                *!VRy1:Si+39;
                !!UN:C(ADV_MANAGER)/(UNC_INT)/?(advMgr:y);
                !!SN:E4291200/(CALLCONV_THISCALL)/(advMgr)/(objSubtype)/0/0/1;
                !!CM:R0;                
              !!el;
                !!HE(objSubtype):B0/?z1;
                !!CM:R0;
                !!SN:T^gem.map.herokill^/?z-1/^hero_name^/z1;
                !!IF:Q1/^%Z-1^;
                !!HE(objSubtype)&1:K;
              !!en;
              !!br;
            !!en;
          !!en;
      !!en;
    !!en;  
  !!en;
; --------------------------------------------------------------------------------------------------

; --------------------------------------------------------------------------------------------------


!?FU(gem_AdvMgr_PanelClick);
  !!UN:Cx1/(STRUCT_HOOK_CONTEXT_EAX)/4/?(itemId:y);
  !!if&(itemId)=25;
    !!UN:C6969164/200/4/?(text:y);
    !!FU(gem_getTimeDescription):P?(time:z);
    !!SN:B(text)/d/?(current:z);
    !!VRz1:S(current) + (time);
    !!UN:Cx1/(STRUCT_HOOK_CONTEXT_ESI)/4/9597928;?(text:y);
  !!en;

; --------------------------------------------------------------------------------------------------
* Show current time and laptop battery charge level by rightclick on game date * (by feanor)
!?FU(gem_getTimeDescription);
!#VA(result:x);
  !!SN:L^kernel32.dll^/?y2 Ay2/^GetSystemPowerStatus^/?y3 Ey3/1/?y4;
  !!VR(chargeLvl:y):Sy4 :65536;
  !!FU(gem_GetLocalTime):Pd/d/d/d/?(hour:y)/?(minute:y)/?(second:y);
  !!VR(h0:z)&(hour:y)<10:S^0^;
  !!VR(m0:z)&(minute:y)<10:S^0^;
  !!VR(s0:z)&(second:y)<10:S^0^;
  !!if&(chargeLvl:y)<>255;
    !!VR(charge:z):S^%T(gem.endl)%T(gem.endl)%T(gem.map.time2) %(chargeLvl:y)%%^;
  !!en;
  !!VR(result):Z^%T(gem.endl)%T(gem.endl)%T(gem.map.time1) %(h0:z)%(hour:y):%(m0:z)%(minute:y):%(s0:z)%(second:y)%(charge:z)^;


  
; --------------------------------------------------------------------------------------------------
; --------------------------------------------------------------------------------------------------
* -------------------------------------- [Hero Screen scripts] -------------------------------------
; --------------------------------------------------------------------------------------------------
; --------------------------------------------------------------------------------------------------


; --------------------------------------------------------------------------------------------------
; --------------------------------------------------------------------------------------------------

; give Banners to Hero from stacks by CTRL + RMB on stack in hero screen (by igrik)
!?FU(OnHeroScreenMouseClick)&999/i^mouse_action^=(MOUSE_RMB_PRESSED)/i^key_leftCtrl^/i^mouse_item^>=68/i^mouse_item^<=74;

  !!VR(slot:y):Si^mouse_item^ -68;
    !!HE-1:C0/(slot)/?(num:y)/d;
    !!if&(num)<>(NO_MON);
      !!EX-1/(slot):R?(isArt:y)/(ART_WARLORDS_BANNER)/?(artSub:y)/?(arts:y);

      !!if&(isArt);
        !!CM:R(FALSE);
        !!if&(isArt)>1;
          !!EX-1/(slot):R1/(ART_WARLORDS_BANNER)/(artSub)/d-1;
        !!el;
          !!EX-1/(slot):R0/(ART_WARLORDS_BANNER)/(artSub)/0;
        !!en;
        !!SN:P^Button.wav^;
        !!HE-1:A(ART_WARLORDS_BANNER);
        !!UN:R3/-1;      
      !!en;
    !!en;

!?FU(OnHeroScreenMouseClick);
  !!if&i^mouse_flags^=512/i^mouse_item^=8000/i^Typhon_Third_Upgrade_Mod_Active^=(FALSE);
    !!CM:R0;
    !!IF:M0/4/^%T(gem.hero.backpack)^;
  !!en;

  !!if&i^mouse_flags^=512/i^mouse_item^=128;
    !!CM:R0;
    !!IF:M0/4/^%T(gem.hero.questlog)^;
  !!en;
;-------------------------------------------------------------------------------


; Archer30: Note that this script doesn't check if Surrender is even possible (it won't be possible in a siege battle as the defender in most cases for instance)
; The best case would be checking the Surrender button status to decide whether to show custom hints
!?FU(OnBattleScreenMouseClick)&i^mouse_item^=2001/i^mouse_action^=(MOUSE_RMB_PRESSED); [|(BATTLE_TYPE_FLAG_RIGHT_HAS_HERO);]
  !!CM:I?(clickPosition:y) S?(clickType:y);

  !!if&(clickPosition)=2001/(clickType)=(MOUSE_RMB_PRESSED); [surrender button]
    !!OW:C?(currPlayer:y)/?(clickedPlayer:y) R(clickedPlayer)/(RES_GOLD)/?(goldAmount:y);
    !!CM:R0;

    !!BA:H0/?(attackingHero:y) H1/?(defendingHero:y);
    !!SN:T^gem.battle.surrendGold^/?(goldAmountMessage:z)/^gold^/(goldAmount);
    !!VR(rmbMessage:z):S(goldAmountMessage);

    !!if&i^battle_hero_1^>(NO_HERO);
      !!BG:Q?(activeSide:y);
      !!VR(isNeedWait:y):S(TRUE);

      !!if&(clickedPlayer)=(currPlayer);
        !!VR(clickSide:y):S(BATTLE_LEFT);
      !!el;
        !!VR(clickSide:y):S(BATTLE_RIGHT);
      !!en;

      !!if&(clickSide)=(activeSide);
        !!UN:C(COMBAT_MANAGER)/(UNC_INT)/?(cmbMgr:y);
        !!SN:E4682544/2/(cmbMgr)/(clickedPlayer); [call of the calculation retreatPrice]
        !!VR(retreatPrice:y):Sv1;
        !!SN:T^gem.battle.surrendPrice^/?(retreatPriceMessage:z)/^price^/(retreatPrice);
        !!VR(isNeedWait):S(FALSE);
      !!el;
        !!SN:T^gem.battle.surrendWait^/?(retreatPriceMessage:z);
      !!en;

      !!VR(rmbMessage):+(retreatPriceMessage);
    !!en;

    !!IF:M0/4/(rmbMessage);
  !!en;


; --------------------------------------------------------------------------------------------------
; --------------------------------------------------------------------------------------------------
*                 [TOWN SCRREN SCRIPTS  - scripts for towns]
; --------------------------------------------------------------------------------------------------
; --------------------------------------------------------------------------------------------------

!?FU(OnKeyPressed_Town)&x1=(KEY_A);     [/i^key_down^;]

  !!SN:F^PluginExists^/^fast upgrade stacks in town^;
  !!FU&v1<>(TRUE):E;
  !!CM:I?(itemId:y);
  !!FU(H3Dlg_GetCurrentDlg):P?i^gem_townDlg^;
  !!VRi^gem_InTownKey_A_Pressed^:S(itemId);
  !!FU(gem_CheckUpgradeCostInTown):P(itemId:y);

!?FU(OnKeyReleased)&x1=(KEY_A)/i^gem_InTownKey_A_Pressed^;
!!VRi^gem_InTownKey_A_Pressed^:S(FALSE);
!!FU(H3Dlg_GetCurrentDlg):P?(currDlg:y);
!!if&i^gem_townDlg^=(currDlg:y);
  !!FU(gem_TownMgr_SetHint):P^^;
!!en;
!!VRi^gem_townDlg^:S(NULL);

!?FU(OnTownMouseHint)&i^gem_InTownKey_A_Pressed^/i^gem_InTownKey_A_Pressed^<>148; [/i^key_down^;]
!!FU(gem_CheckUpgradeCostInTown):Pi^mouse_item^; [i^gem_InTownKey_A_Pressed^;]


!?FU(gem_CheckUpgradeCostInTown);
!#VA(clickPlace:x);
  !!if&(clickPlace)>=115/(clickPlace)<=121;
    !!VR(monPosition:y):S(clickPlace) -115;
    !!CA-1:H0/?(heroGuard:y);

    !!if&(heroGuard)>(NO_HERO);
      !!HE(heroGuard):C0/(monPosition)/?(monType:y)/?(monAmount:y);
    !!el;
      !!CA-1:M2/(monPosition)/?(monType:y)/?(monAmount:y);
    !!en;
    !!SN:E7662803/1/(monType);
    !!VR(upgMonType:y):Sv1;

    !!FU(gem_DisplayUpgradeCostInTown)&(monAmount):P(monType)/(upgMonType)/(monAmount);
    !!FU:E;
  !!en;

  !!if&(clickPlace)>=140/(clickPlace)<=146;

    !!CA-1:H1/?(heroGuest:y);

    !!if&(heroGuest)>(NO_HERO);
      !!VR(monPosition:y):S(clickPlace) -140;
      !!HE(heroGuest):C0/(monPosition)/?(monType:y)/?(monAmount:y);
      !!SN:E7662803/1/(monType);
      !!VR(upgMonType:y):Sv1;
      !!FU(gem_DisplayUpgradeCostInTown)&(monAmount):P(monType)/(upgMonType)/(monAmount);
    !!en;

    !!FU:E;
  !!en;

!?FU(gem_OnOpenCreatureInformationDlg);
  !!VRi^gem_MonCanBeUpgraded^:S(FALSE);
  !!UN:Cx1/(STRUCT_HOOK_CONTEXT_EBP)/4/?(ebp:y) C(ebp:y)/20/4/?(town:y) C(ebp:y)/-20/4/?(upgMonType:y);
  !!if&(town)>0/(upgMonType)<>(NO_MON);
    !!UN:Cx1/0/4/?(monType:y);
    !!UN:Cx1/76/4/?(monAmount:y);       [get mon num]
    !!FU(gem_DisplayUpgradeCostInTown):P(monType)/(upgMonType)/(monAmount);
    !!VRi^gem_townHintChanged^:S(TRUE);
  !!en;

!?FU(gem_OnCloseCreatureInformationDlg)&i^gem_townHintChanged^;
!!VRi^gem_townHintChanged^:S(FALSE);
!!FU(gem_TownMgr_SetHint):P^^;

!?FU(gem_DisplayUpgradeCostInTown);
!#VA(monType:x) (upgMonType:x) (monAmount:x) (clickPlace:x);

  !!if&(upgMonType)>-1;
    !!VR(textNum:y):S(monAmount) -1 B;
    !!SN:H^monname^/(monType)/(textNum)/?(monName:z);
    !!SN:H^monname^/(upgMonType)/(textNum)/?(upgMonName:z);

    !!OW:Cd/?(clickedPlayer:y);
    !!VR(monDifCost:z):S^{%(monAmount)} %(monName) --> {%(monAmount)} %(upgMonName)  ^;
    !!VR(lackOfRes:z):S^^;
    !#VA(upgCost[7]:y);

    !!SN:E5565264/(CALLCONV_FASTCALL)/(monType)/(upgMonType)/(monAmount)/?(upgCost); [H3CreatureIngormation::GetUpgradeCost]

    !!re i/(RES_GOLD)/0/-1;
      !!OW:R(clickedPlayer)/i/?(resAmount:y);
      !!if&(upgCost[i])>0;
        !!if&(resAmount)>=(upgCost[i]);
          !!VR(monDifCost:z):+^{%(upgCost[i])} {~>smalres.def:%i} ^;
        !!el;
          !!VR(monDifCost:z):+^{~red} %(upgCost[i]) {~>smalres.def:%i}} ^;
          !!VR(notEnoughRes:y):S(upgCost[i]) -(resAmount);
          !!VR(lackOfRes:z):+^ %(notEnoughRes)  {~>smalres.def:%i} ^;
        !!en;
      !!en;
    !!en;

    !!VR(space:z):S^^;
    !!VR(space)&(lackOfRes)<>^^:S^/ ^; 
    !!FU(gem_TownMgr_SetHint):P^{~text align=center}%(monDifCost) %(space)%(lackOfRes)}^;
  !!en;





!?FU(OnAfterErmInstructions);
!!FU(gem_GetLocalTime):Pd/?(month:y)/d/?(day:y);

!!if&(day)=1/(month)=4;
  !!IF:Q1/-1/-1/(MSG_TYPE_QUESTION)/^%T(gem.settings.foolDay)^;

  !!if&1;
    !!VRi^gem_isFirstApril^:S(TRUE);

    !#VA(mons[9]:y) (upgMons[9]:y);
    !!re i/0/8;
      !!FU(NewIntArray):P7/?(mons[i]) P7/?(upgMons[i]);
    !!en;

    !!re l/0/6;
      !!FU(NewIntArray):P(mons[SIZE])/?(monsArrInd:y) P(upgMons[SIZE])/?(upgMonsArrInd:y);
      !!FU(Array_Fill):P(monsArrInd:y)/0/1 P(upgMonsArrInd:y)/0/1;
      !!FU(Array_Shuffle):P(monsArrInd) P(upgMonsArrInd);

      !!re t/0/(TOWN_LAST_WOG);
        !!UN:Tt/l/0/?(mon:y) Tt/l/1/?(upgMon:y);

        !!FU(Array_Pop):P(monsArrInd)/?m P(upgMonsArrInd)/?n;
        !!SN:M(mons[m])/l/(mon) M(upgMons[n])/l/(upgMon);   
  
      !!en;
    !!en;

    !!re l/0/6;
      !!re t/0/(TOWN_LAST_WOG);
        !!SN:M(mons[t])/l/?(mon) M(upgMons[t])/l/?(upgMon);
        !!MA:O(mon)/t O(upgMon)/t U(mon)/(upgMon);

        !!UN:Tt/l/0/(mon:y) Tt/l/1/(upgMon:y);
      !!en;
    !!en;

    !!MA:X(MON_GRAND_ELF)/d~(MON_FLAG_SHOOTER);
    !!VR(mon:y):S(MON_SKELETON);
    !!re i/0/5;                         [(end_value);]
      !!MA:S(mon)/2;
      !!FU(GetUpgradedMonster):P(mon)/?(mon);
      !!if&(mon)=(NO_MON);
        !!br;
      !!en;
    !!en;
    !!FU(GetMaxMonsterId):P?(maxMonId:y);
    !!re i/0/(maxMonId);
      !!MA:Xi/?f;
      !!VRf:&(MON_FLAG_DRAGON);
      !!if&f;
        !!MA:Xi/d|(MON_FLAG_UNDEAD);
      !!en;
    !!en;

  !!el;
    !!VRi^gem_isFirstApril^:S(FALSE);
  !!en;
!!en;
*!VRi^gem_isFirstApril^:S(TRUE);


!?FU(gem_TownDlg_BeforeSmallCreatureBarDefSet)&i^gem_isFirstApril^;

  // lvl 0 creatures looks like sth
  !!UN:Cx1/(STRUCT_HOOK_CONTEXT_EBP)/4/?(ebp:y) C(ebp)/-28/4/?(dwId:y);
  !!VRr:R0/0/9;
  !!if&r=0;
    !#VA(mons[7]:y);
    !!VR(mons[0]):C(MON_HORNED_DEMON)/(MON_HELL_BARON)/(MON_PHOENIX)/(MON_ARCHER)/(MON_TROLL)/(MON_AZURE_DRAGON)/(MON_BALLISTA);
    !!VRr:R0/0/6;
    !!UN:Cx1/(STRUCT_HOOK_CONTEXT_EBX)/4/(mons[r]);
  !!en;


!?FU(gem_OnScreenLogDrawText)&i^gem_isFirstApril^/i^gem_several_PC^=(FALSE);
  !!UN:Cx1/(STRUCT_HOOK_CONTEXT_EDI)/4/?(textPtr:y);
  !!SN:B(textPtr)/d/^4 8 15 16 23 42^; // some LOST


!?FU(OnEveryDay)&i^gem_isFirstApril^/x1=1/i^timerOnce^;
!!UN:U63/50/?n;                         [count skulls]
!!re i/1/n;                             [iterate]
  !!UN:U63/50/i/2;                      [put coords to v2/v3/v4]
  !!TRv2/v3/v4:T?t/?s/d/d/d/d/d/d;      [check terrain]
  !!co|t=4/t>7;                         [skipp bad/same]
  !!VR(x:y):Sv2-1;                      [loop rectangle]
  !!re j/0/2;
    !!VR(y:y):Sv3-1;
    !!re k/0/1;                         [(]
      !!TR(x)/(y)/v4:T4/11/d/d/d/d/d/d; [set swamp]
      !!VR(y):+1; 
    !!en;
    !!VR(x):+1; 
  !!en;
!!en;

!?FU(gem_CreateERMHook)&i^gem_isFirstApril^;

  *!re i/0/7;set new Skull def
    *!SN:R^skull.def:0_%i.png^/^Data\Defs\shreckul.def\0_0.png^;
  *!en;

  !!SN:Ex1/1/5129033/(gem_OnHeroScoutingGetBonus);

  *!SN:Ex1/1/4598228/(gem_BeforeCombatDlgShow);
  *!SN:Ex1/1/6054985/(gem_TownDlg_BeforeSmallCreatureBarDefSet);
  !!SN:Ex1/1/5590326/(gem_OnScreenLogDrawText);

  !!SN:Ex1/1/7760962/(gem_BeforeSpellCostReduction);
  !!SN:Ex1/1/5905747/(gem_AfterSacrificeResurrect);

  *!SN:Ex1/1/5896749/(gem_CombatDlg_AtCastingMouseMove);
  *!SN:Ex1/1/4799534/(gem_CombatDlg_BeforeCursorShadowDrawing);
  *!SN:Ex1/1/4799639/(gem_CombatDlg_AfterCursorShadowDrawing);

  *!UN:C4457342/1/1/(SPELL_FRENZY) C4457357/6/4/(SPELL_FRENZY); [unicorns casts frenzy]
  *!UN:C5127993/1/4/(MON_PEASANT);
  *!UN:C5928810/1/1/(MON_IMP);

  *!UN:C4461430/1/1/2;                  [attack all around attacks own units]
  *!UN:C4490192/1/1/(SPELL_CURSE);      [ogre mages casts curse]
  *!UN:C5137380/-2/49449;               [defence decreases hero stats]

  *!re i/0/3;                           ["leadership kappa"]
    *!VR(offset:y):Si*4;
    *!VR(value:y):Si*-1;
    *!UN:C6547880/(offset)/4/(value);
  *!en;
  *!re i/0/5;
    *!UN:C4447553/i/1/(OPCODE_NOP_1);   [no more "unaffected by morale"]
  *!en;
  *!UN:C4447709/1/4/-3; // minotaures - 3 morale

!?FU(gem_BeforeCombatDlgShow)&i^gem_isFirstApril^;
!!UN:Cx1/(STRUCT_HOOK_CONTEXT_EAX)/4/?(dlg:y);
!!if&(dlg);
  !!FU(gem_New):P52/?(pcx:y);
  !!if&(pcx);
    !!UN:C(dlg)/32/4/?(dlgW:y) C(dlg)/36/4/?(dlgH:y);
    !!VR(dlgW):-65; 
    !!VR(dlgH):-67; 
    !!SN:E4521888/(CALLCONV_THISCALL)/(pcx:y)/(dlgW)/(dlgH)/65/67/20202/^b_toasty.pcx^/2048;           [create bg picture]
    !!SN:E6287984/(CALLCONV_THISCALL)/(dlg:y)/(pcx:y)/-1;                                 [ad bg picture]
    !!UN:C(pcx)/24/2/d65; //shift right
    !!UN:C(pcx)/28/2/0; // set wisth 0 to hide
    !!VRi^gem_CombatDlg_DlgPcx_Toasty^:S(pcx);
  !!en;  
!!en;

!#DC(GEM_COMBAT_DLG_TOASTY_LENGTH) = 565;
!#DC(GEM_COMBAT_DLG_PROC_HOOK_ADDRESS) = 4667952;



!?FU(gem_OnHeroScoutingGetBonus)&i^gem_isFirstApril^/i^timerIsAi^=(FALSE);
*!UN:Cx1/(STRUCT_HOOK_CONTEXT_EBX)/4/?s; [get current scouting area]
*!VRr:R0/1/s;                            [set minmax]
!!UN:Cx1/(STRUCT_HOOK_CONTEXT_EBX)/4/d-5;r;  [set new scouting area (base one)]

!?FU(gem_CombatManager_Proc)&i^gem_CombatDlg_ToastyCounter^;
!!if&i^gem_CombatDlg_DlgPcx_Toasty^;
  !!VR(needUpdate:y):S(TRUE);

  !!VR(dlgPcx:y):Si^gem_CombatDlg_DlgPcx_Toasty^;
  !!UN:C(dlgPcx)/24/2/?(currX:y) C(dlgPcx)/28/2/?(currW:y);
  !!if&i^gem_CombatDlg_ToastyCounter^>=500;
    !!UN:C(dlgPcx)/24/2/d-1 C(dlgPcx)/28/2/d1; //shit left
  !!el&i^gem_CombatDlg_ToastyCounter^<=65;
    !!UN:C(dlgPcx)/24/2/d1 C(dlgPcx)/28/2/d-1; //shit right
  !!el;
    !!VR(needUpdate:y):S(FALSE);
  !!en;

  !!if&(needUpdate)>0;
    !!UN:C(dlgPcx)/4/4/?(dlg:y) C(dlgPcx)/16/2/?(itemId:y); C(dlgPcx)/24/2/d-1;
    !!SN:E6288864/2/(dlg)/1/2000/7000;65535; [update currentDlg;]
    !!SN:E6288864/2/(dlg)/1/(itemId)/(itemId); [update onlyItem;]
  !!en;
!!en;

!!VRi^gem_CombatDlg_ToastyCounter^:-1;
!!if&i^gem_CombatDlg_ToastyCounter^=0;
  !!FU(gem_UnsetHookAt):P(GEM_COMBAT_DLG_PROC_HOOK_ADDRESS)/(gem_CombatManager_Proc);
!!en;


!?FU(OnStackToStackDamage)&i^gem_isFirstApril^;
!!BMx1:T?t;
!!if&t=(MON_PEASANT);
  !!BMx2:F?f;
  !!VRf:&(MON_FLAG_DRAGON);
  !!if&f;
  !!VRx4:Sd<<4 F0/(INT_MAX);
  !!en;
!!en;


!?FU(gem_FirstApril_PlayToasty);
!!if&i^battle_isVisible^;
  !!VRi^gem_CombatDlg_ToastyCounter^:S(GEM_COMBAT_DLG_TOASTY_LENGTH);
  !!FU(gem_SetHookAt):P(GEM_COMBAT_DLG_PROC_HOOK_ADDRESS)/(gem_CombatManager_Proc);
  !!SN:P^gemToast.wav^;
!!en;

!?FU(OnBeforeBattleAction)&i^gem_isFirstApril^/i^battle_human_%i(battle_acting_side)^;
!!BG:A?(action:y);
!!if&(action)=(BATTLE_ACTION_SHOOT);
  *!VR(heroId:y):S^battle_human_%i(battle_acting_side)^;
  !!VRr:R0/0/3;

  !!FU&r:E;

  !!BG:E?(target:y);
  !!BM(target:y):I?(side:y);
  !!BMi^battle_acting_stack^:T?t;
  !!VR(side)&t=(MON_BALLISTA):X1;
  !!FU(gem_SelectRandomTarget):P(side:y)/i^battle_acting_stack^/?(newTarget:y);
  !!if&(newTarget)<>(target);
    !!BM(newTarget):P?p;
    !!FU(gem_FirstApril_PlayToasty):P;
    !!BG:Dp;
  !!en;
!!en;



!#DC(GEM_CURSOR_NUMBER) = 4;



!?FU(gem_CombatDlg_AtCastingMouseMove);
  !!UN:Cx1/(STRUCT_HOOK_CONTEXT_ESI)/4/?i^gem_CombatManager_MouseSpellId^;

!?FU(OnBeforeBattleUniversal);
*!FU(gem_CursorShadow_Create):P;
!?FU(gem_CursorShadow_Create);
!!re i/0/(GEM_CURSOR_NUMBER)/1/-1;(end_value);
  !!SN:E5614096/(CALLCONV_THISCALL)/^gemCurs%i.pcx^;
  !!VRi^gem_CombatManager_NewCursorShadow_%i^:Sv1;
!!en;

!?FU(gem_CombatDlg_AfterCursorShadowDrawing);
!!VRi^gem_CombatManager_MouseSpellId^:S(NULL);

!?FU(gem_CombatDlg_BeforeCursorShadowDrawing);

!!if&i^gem_CombatManager_MouseSpellId^;
  !!SSi^gem_CombatManager_MouseSpellId^:S?t;
  !!FU(IntLog2):Pt/?l;
!!en;

!!VR(pcx:y):Si^gem_CombatManager_NewCursorShadow_%l^;

!!if&(pcx);
  !!UN:Cx1/(STRUCT_HOOK_CONTEXT_EDI)/4/?(cmbMgr:y) C(cmbMgr)/21424/4/?(combatPcx:y) C(combatPcx)/48/4/?(buffer:y); C(edi)/81912/4/i^gem_CombatManager_NewCursorShadow^;?(pcx:y);
  !!UN:C(pcx)/36/4/?(w:y) C(pcx)/40/4/?(h:y) C(combatPcx)/44/4/?(scanLine:y) C(combatPcx)/36/4/?(dW:y) C(combatPcx)/40/4/?(dH:y);
  !!UN:Cx1/(STRUCT_HOOK_CONTEXT_ESI)/4/?(it:y);
  !!UN:Cx1/(STRUCT_HOOK_CONTEXT_EAX)/4/?(eax:y);
  !!VR(hexPtr:y):S(it)*4 +(eax);
  !!UN:C(hexPtr)/4/?(hexId:y); C(hex)/6/2/?(xy:y);
  !!VR(hexOffset:y):S(hexId) *112 + 452 +(cmbMgr);
  !!UN:C(hexOffset)/4/2/?(x:y) C(hexOffset)/6/2/?(y:y);

  !!SN:E4513664/(CALLCONV_THISCALL)/(pcx:y)/0/0/45/52/(buffer)/(x)/(y)/(dW:y)/(dH:y)/(scanLine)/0; draw pcx16 to pcx16
  !!SN:X?y99/0;
  !!UN:Cx1/(STRUCT_HOOK_CONTEXT_RET)/4/4799596;
!!en;

!?FU(gem_CursorShadow_Delete);
!!re i/0/(GEM_CURSOR_NUMBER)/1/-1;(end_value);
  !!co&i^gem_CombatManager_NewCursorShadow_%i^=0;
  !!SN:E4513008/(CALLCONV_THISCALL)/i^gem_CombatManager_NewCursorShadow_%i^/1;
  !!VRi^gem_CombatManager_NewCursorShadow_%i^:S(NULL);
!!en;

!?FU(OnAfterBattleUniversal);
*!FU(gem_CursorShadow_Delete);

!?FU(OnGameLeave);
*!FU(gem_CursorShadow_Delete);





!?FU(OnAfterBattleUniversal)&i^gem_CombatDlg_ToastyCounter^;
!!VRi^gem_CombatDlg_ToastyCounter^:S(NULL);
!!VRi^gem_CombatDlg_DlgPcx_Toasty^:S(NULL);

!!FU(gem_UnsetHookAt):P(GEM_COMBAT_DLG_PROC_HOOK_ADDRESS)/(gem_CombatManager_Proc);



!?FU(OnBeforeBattleAction)&i^gem_isFirstApril^;
!!BG:A?(actionType:y);
!!VRr:R0/0/14;
!!if&(actionType)=(BATTLE_ACTION_HERO_CAST)/r=0;
  !!VRi^gem_CastingSpell^:S(TRUE);
!!en;

!?FU(OnMagicCorrectedResistance)&i^gem_CastingSpell^;
!!MR:N?s F?f;
!!BMs:Z?s;
!!SN:E4468128/(CALLCONV_THISCALL)/s/0; [stack full health]
!!if&f>=v1;
  
  !!SN:E5875568/(CALLCONV_THISCALL)/^gemNani.wav^;
  !!SN:E5874112/(CALLCONV_STDCALL)/v1/-1;/v1/v1;
  !!SN:E5212752/(CALLCONV_THISCALL)/3000;
!!en;

!?FU(OnBattleActionEnd);
!!VRi^gem_CastingSpell^:S(FALSE);

!?FU(gem_SelectRandomTarget);
!#VA(side:x) (activeStack:x) (result:x);
!!VR(start:y):S(side) *21;
!!VR(end:y):S(start)+20;
!!FU(NewIntArray):P?(targets:y);
!!re i/(start)/(end);
  !!BMi:N?n T?t;
  !!if&n>0/t<>(MON_ARROW_TOWERS);
    !!co&i=(activeStack);
    !!FU(Array_Push):P(targets)/i;
  !!en;
!!en;

!!SN:M(targets)/?(size:y);
!!VR(size):-1;
!!VR(rnd:y):R0/0/(size);
!!SN:M(targets)/(rnd)/?(result);

!?FU(gem_AfterSacrificeResurrect)&i^gem_isFirstApril^;
  !!UN:Cx1/(STRUCT_HOOK_CONTEXT_EDX)/4/1;[restore only one hp]

!?FU(gem_BeforeSpellCostReduction)&i^gem_isFirstApril^; [cost reduction consumes mana lol]
!!UN:Cx1/(STRUCT_HOOK_CONTEXT_EBP)/4/?(ebp:y) C(ebp)/8/4/?(cost:y) C(ebp)/-20/4/?(costReduction:y);
!!if&(costReduction)>0;
  !!VR(costReduction):Sd<<1;
  !!UN:Cx1/(STRUCT_HOOK_CONTEXT_EAX)/4/d(costReduction);
!!en;


!?FU(OnEveryDay)&i^gem_isFirstApril^;
!!FU(gem_GetLocalTime):Pd/?(month:y)/d/?(day:y);
!!if|(day)<>1/(month)<>4;
  !!VRi^gem_isFirstApril^:S(FALSE);
!!en;
