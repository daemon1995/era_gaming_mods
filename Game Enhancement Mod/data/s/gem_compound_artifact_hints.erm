ZVSE2


!?FU(gem_CreateERMHook);

*!SN:Ex1/1/5103807/(gem_OnHeroDoll_Rmc);
*!SN:Ex1/1/5104514/(gem_OnHeroBackPack_Rmc);

*!SN:Ex1/1/5962342/(gem_OnSwapHeroDoll_Rmc);
*!SN:Ex1/1/5963273/(gem_OnSwapHeroBackPack_Rmc);

*!SN:Ex1/1/5371343/(gem_OnKingdomHeroDoll_Rmc);
*!SN:Ex1/1/5371669/(gem_OnKingdomHeroBackPack_Rmc);

; Reset artifact description
*!SN:Ex1/1/5086553/(gem_AfterShowNewArtifactDescription);
*!SN:Ex1/1/5104578/(gem_AfterShowNewArtifactDescription);
*!SN:Ex1/1/5371409/(gem_AfterShowNewArtifactDescription);
*!SN:Ex1/1/5371733/(gem_AfterShowNewArtifactDescription);
*!SN:Ex1/1/5086548/(gem_AfterShowNewArtifactDescription);
*!SN:Ex1/1/5104570/(gem_AfterShowNewArtifactDescription);
*!SN:Ex1/1/5371406/(gem_AfterShowNewArtifactDescription);
*!SN:Ex1/1/5371730/(gem_AfterShowNewArtifactDescription);


!!SN:Ex1/1/5103807/(gem_OnHeroDoll_Rmc);
!!SN:Ex1/1/5104507/(gem_OnHeroBackPack_Rmc);

!!SN:Ex1/1/5962335/(gem_OnSwapHeroDoll_Rmc);
!!SN:Ex1/1/5963278/(gem_OnSwapHeroBackPack_Rmc);

!!SN:Ex1/1/5371339/(gem_OnKingdomHeroDoll_Rmc);
!!SN:Ex1/1/5371665/(gem_OnKingdomHeroBackPack_Rmc);

; Reset artifact description
!!SN:Ex1/1/5086548/(gem_AfterShowNewArtifactDescription);
!!SN:Ex1/1/5104570/(gem_AfterShowNewArtifactDescription);
!!SN:Ex1/1/5371406/(gem_AfterShowNewArtifactDescription);
!!SN:Ex1/1/5371730/(gem_AfterShowNewArtifactDescription);





*!SN:Ex1/1/5156636/(gem_AfterMultyPicDlg);
*!SN:Ex1/1/5156308/(gem_AfterMultyPicDlg);
*!SN:Ex1/1/5156471/(gem_AfterMultyPicDlg);

0043E197
*?FU(gem_AfterMultyPicDlg);&i^art_isChanged^;                                         [before multipic create]
  *!UN:Cx1/(STRUCT_HOOK_CONTEXT_ESI)/4/?(esi:y) C(esi)/48/4/?(def:y);
  *!UN:C(def)/48/4/?(width:y) C(def)/52/4/?(height:y);
  *!if&(width)=44;
    *!UN:Cx1/(STRUCT_HOOK_CONTEXT_EBX)/4/?(destX:y) Cx1/(STRUCT_HOOK_CONTEXT_EDI)/4/?(destY:y);
    *!FU(WndMgr_GrayScale):P(destX:y)/(destY:y)/(width:y)/(height:y);
  *!en;
*!en;


!?FU(gem_BeforeMultyPicDlg)&i^art_isChanged^;                                           [before multipic create]
!!UN:Cx1/(STRUCT_HOOK_CONTEXT_EBP)/4/?(ebp:y) C(ebp)/56/1/?(isNotPatched:y);            [disable scrollbar item]

!!if&(isNotPatched);
  !!UN:C(ebp)/56/1/?(isNotPatched:y);
  !!UN:C(ebp)/12/4/?(textPtr:y) C(ebp:y)/48/4/?(width:y);                               [get text and item width]
  !!VR(width):-24;
  !!SN:E5618960/(CALLCONV_THISCALL)/6681324;                                            [load font into v1]
  !!VR(font:y):Sv1;
  !!VRs^gem_temp^:Sz1;                                                                  [store variable data]
  !!re i/0/15;
    !!UN:C9597928/i/1/0;                                                                [clean z-var buffer]
  !!en;
  !!SN:E4937968/(CALLCONV_THISCALL)/(font)/(textPtr)/(width)/9597928;                   [split text per strings/ &font,&text/width/&vector]
  !!UN:C9597928/4/4/?(first:y) C9597928/8/4/?(end:y);                                   [get first and last item ptrs]

  !!VR(size:y):S(end) -(first) Sd>>4;                                                   [get items num by ptr substraction]
  !!SN:E4939120/(CALLCONV_THISCALL)/9597928/(first)/(end);                              [clear vector data]

  !!VR(baseSize:y):S14;
  !!VR(size):-(baseSize);

  !!VRz1:Ss^gem_temp^;                                                                  [restore variable data]
  !!VRs^gem_temp^:S^^;

  !!if&(size)>0;                                                                        [check if over than limit]
    
    !!UN:C(font)/33/1/?(charHeight:y);                                                  [get char height]

    !!VR(offset:y):S(charHeight) *(size);                                            [create offset :10;100 *;]
    !!UN:C(ebp)/36/4/d(offset:y) C(ebp)/52/4/d(offset:y);                               [increase dlg and textField height]
    !!UN:C(ebp)/28/4/?(yPos:y);                                                         [get dlg yPos]
    !!VR(yPos):-(offset) F0/(INT_MAX);                                                  [fix crash at top border]
    !!UN:C(ebp)/28/4/(yPos);                                                            [set new pos]
  !!en;

!!en;

!?FU(gem_OnHeroDoll_Rmc);
!!UN:Cx1/(STRUCT_HOOK_CONTEXT_EBX)/4/?(comboSetId:y);
!!UN:Cx1/(STRUCT_HOOK_CONTEXT_EBP)/4/?(ebp:y) C(ebp:y)/-28/4/?(artId:y);
!!if&(artId)<>(NO_ART);
  !!UN:C6916976/4/?(heroPtr:y) C(heroPtr)/26/2/?(heroId:y);
  !!FU(gem_WorkWithArtifact)&i^Advanced_Classes_Mod_Active^=0/(comboSetId:y)<>(NO_ART):P(heroId)/(artId);
  !!FU(ACM_WorkWithArtifact)&i^Advanced_Classes_Mod_Active^=1:P(heroId)/(artId);
!!en;


!?FU(gem_OnHeroBackPack_Rmc);
!!UN:Cx1/(STRUCT_HOOK_CONTEXT_EBP)/4/?(ebp:y) C(ebp:y)/-20/4/?(artId:y);
!!if&(artId)<>(NO_ART);
  !!UN:C6916976/4/?(heroPtr:y) C(heroPtr)/26/2/?(heroId:y);
  !!FU(gem_WorkWithArtifact)&i^Advanced_Classes_Mod_Active^=0:P(heroId)/(artId);
  !!FU(ACM_WorkWithArtifact)&i^Advanced_Classes_Mod_Active^=1:P(heroId)/(artId);
!!en;


!?FU(gem_OnSwapHeroDoll_Rmc);
!!UN:Cx1/(STRUCT_HOOK_CONTEXT_EBP)/4/?(ebp:y) C(ebp:y)/-8/4/?(artId:y) C(ebp)/8/4/?(side:y);
!!VR(offset:y):S(side) *4 +64;
!!UN:C(SWAP_MANAGER)/4/?(swapMgr:y) C(swapMgr)/(offset)/4/?(hero:y) C(hero)/26/2/?(heroId:y);
!!FU(gem_WorkWithArtifact):P(heroId)/(artId);


!?FU(gem_OnSwapHeroBackPack_Rmc);
!!UN:Cx1/(STRUCT_HOOK_CONTEXT_EBP)/4/?(ebp:y) C(ebp:y)/-20/4/?(artId:y);
!!UN:Cx1/(STRUCT_HOOK_CONTEXT_ESI)/4/?(hero:y) C(hero)/26/2/?(heroId:y);
!!FU(gem_WorkWithArtifact):P(heroId)/(artId);


!?FU(gem_OnKingdomHeroDoll_Rmc);
!!UN:Cx1/(STRUCT_HOOK_CONTEXT_EAX)/4/?(artId:y) Cx1/(STRUCT_HOOK_CONTEXT_ESI)/4/?(heroPtr:y) C(heroPtr)/26/2/?(heroId:y);
!!FU(gem_WorkWithArtifact):P(heroId)/(artId);

!?FU(gem_OnKingdomHeroBackPack_Rmc);
!!UN:Cx1/(STRUCT_HOOK_CONTEXT_EAX)/4/?(artId:y) Cx1/(STRUCT_HOOK_CONTEXT_ESI)/4/?(heroPtr:y) C(heroPtr)/26/2/?(heroId:y);
!!FU(gem_WorkWithArtifact):P(heroId)/(artId);


!?FU(gem_WorkWithArtifact);
!#VA(heroId:x) (artId:x);

!!if&(artId)<>(NO_ART)/(artId)<1000;
  !!FU(gem_CreateArtArray):P(artId)/?(arts:y)/?(comboArtId:y);
  !!if&(comboArtId)<>(NO_ART);
    !!SN:H^art^/(artId)/1/?s^basicArtDesc^;  [Get basic artifact description]
    !!FU(gem_LoopArrayAndFormArtDesc):P(heroId)/(artId)/(arts)/(comboArtId);
  !!en;
!!en;


!?FU(gem_CreateArtArray);
!#VA(artId:x) (arts:x) (comboArtId:x);

!!VR(comboArtId):S(NO_ART);
!!UN:A(artId)/5/?(ourComboId:y);  [Check if artifact is a part of compound artifact]
!!if&(ourComboId)<>(NO_ART);
  !!UN:A(ourComboId)/?(comboArtId:x)/d/d;  [Get the id of compound artifact]
  !!FU(NewIntArray):P?(arts:x);  [Define array for art ids]
  !!SN:F^ExtendArrayLifetime^/(arts);
  !!FU(GetMaxArtifactId):P?(maxArtifactId:y);
  !!re i/7/(maxArtifactId:y);  [Loop all arts]
    !!UN:Ai/5/?(combId:y); 
    !!if&(combId)=(ourComboId);  [Find art that matches by id with art is being clicked]
      !!FU(Array_Push):P(arts)/i;  [Push it into array]
    !!en;
  !!en;
!!en;


!?FU(gem_LoopArrayAndFormArtDesc);
!#VA(heroId:x) (artId:x) (arrArtId:x) (comboArtId:x);

; Reset variables
!!VR(counter:y):S0;

; Get size of types-array
!!SN:M(arrArtId)/?(arrSize:y);
!!VRs^gem_temp^:S^^;
; Form a string for common artifacts
!!re i/0/(arrSize)/1/-1;
  !!SN:M(arrArtId)/i/?(artIdf:y);
  !!SN:H^art^/(artIdf)/0/?(artName:z);
  *!VR(artName:z):S^{~>Artifact.def:0:%(artIdf)}^;
  !!HE(heroId):A2/(artIdf)/?(arts:y)/?(isEquipped:y);
  !!VR(overflow:z):S^^;
  !!if&(arts);
    !!if&(isEquipped);
      !!VR(color:z):S^{~LightGreen}^;
      !!VR(counter:y): +1;
    !!el;
      !!VR(color:z):S^{~Orange}^;
    !!en;
    !!if&(arts)>1;
      !!VR(overflow:z):S^ (%(arts))^;
    !!en;
  !!el;
    !!VR(color:z):S^{~Grey}^;
  !!en;
  !!VRs^gem_temp^: +^%T(gem.endl)%(color)%(artName)%(overflow:z){~}^;
!!en;

; Form a string for compound artifact and counter
!!SN:H^art^/(comboArtId)/0/?(artName:z);
!!VR(artString:z)&(counter)>0:S^{~LightGreen}%(artName) (%(counter)/%(arrSize)){~}%T(gem.endl)^;
!!VR(artString:z)&(counter)=0:S^{~Grey}%(artName) (%(counter)/%(arrSize)){~}%T(gem.endl)^;

; Form a result string
!!VRs^gem_addArtDesc^:S^%T(gem.endl)%T(gem.endl)%T(gem.endl)%(artString)%s(gem_temp)^;
!!VRs^gem_temp^:S^^;

; Add a result string to default artifact description
!!SN:H^art^/(artId)/1/^%s(basicArtDesc)%s(gem_addArtDesc)^;
!!VRs^gem_addArtDesc^:S^^;

; Set flag
!!VRi^art_isChanged^:S(artId);

!?FU(gem_AfterShowNewArtifactDescription)&i^art_isChanged^;  [Reset artifact description to basic artifact description]
!!SN:H^art^/i^art_isChanged^/1/s^basicArtDesc^;
!!VRs^basicArtDesc^:S^^;
!!VRi^art_isChanged^:S(FALSE);

** end
