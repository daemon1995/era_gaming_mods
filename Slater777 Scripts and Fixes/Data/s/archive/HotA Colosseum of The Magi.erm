Z VSE2
// moved to cpp plugin

; ============== SETTINGS ==============
!#VRi^colmagi_chance^:S50;        [Chance of Colosseum replacement]
; ============ END SETTINGS ============


// Object replacement
!?FU(colmagi_RestrainValues);
!!VRi^colmagi_chance^:F0/100;

!#FU(colmagi_RestrainValues):P;


!?FU(OnAfterErmInstructions)&i^colmagi_chance^>0;
; deleting the sound in the delete object function
; because it causes a crash
!!UN:C4893167/2/?(patch:y);
!!UN:C4893167/2/24555;
; get size of the map
!!UN:X?(mapSize:y)/?(hasUnderground:y); 
; pass once through all cells of the map
!!re l/0/(hasUnderground)/1;  coord z
  !!re k/0/(mapSize)/1/-1;    coord y
    !!re i/0/(mapSize)/1/-1;  coord x
      !!OBi/k/l:T?(objType:y) U?(objSubtype:y);
      !!TRi/k/l:E?(isYellowSquare:y) P?(isPassable:y); 
      !!VR(isYellowSquare):X1;  reverse param isYellowSquare
      !!FU(colmagi_OnIterateAllMapObjects):Pi/k/l/(objType)/(objSubtype)/(isYellowSquare)/(isPassable);
    !!en;
  !!en;
!!en;
; restoring the source code of the sound
; in the delete objects function
!!UN:C4893167/2/(patch);


!?FU(colmagi_OnIterateAllMapObjects)&i^colmagi_chance^>0;
!#VA(x:x) (y:x) (z:x);
!#VA(objType:x);
!#VA(objSubtype:x);
!#VA(isYellowSquare:x); boolean.
!#VA(isPassable:x);     boolean.
; check: is entry to the object
!!FU&(isYellowSquare)<>(TRUE):E;
; init var replacement
!!VR(replace:y):S(FALSE);
; check objects
!!VR(replace)&(objType)=(OBJ_ARENA)/(objSubtype)=0:S(TRUE);
; exit if not searchable types
!!FU&(replace)<>(TRUE):E;
; generate 10% chance
!!VR(random:y):R0/1/100; 
!!FU&(random)>i^colmagi_chance^:E;
; set a new object type
!!VR(objType):S(OBJ_ARENA);
!!VR(objSubtype):S1;
; delete current and create a new object
!!UN:O(x)/(y)/(z)/1/0; 
!!VR(x):+1;                             [move by 1 tile to right]
!!UN:I(x)/(y)/(z)/(objType)/(objSubtype)/0;


// Give a name to an object
!?FU(OnAfterErmInstructions);
; creating object hint
!!SN:T^jsMod.advObject.4.1.name^/?(objName:z);
!!SN:H^object^/(OBJ_ARENA)/1/(objName);


// Give custom numbers to objects
!?FU(OnEveryDay)&i^timerOnce^/i^timerDay^=1;
!!VR(x:y):S-1;

!!re i;                                 [loop though all the arenas]
  !!UN:U(OBJ_ARENA)/1/-1/(x)/(y:y)/(z:y);
  !!br&(x)<0;
  !!PO(x)/(y)/(z):Ni^colmagiId^;
  !!VRi^colmagiId^&i^colmagiId^<15:+1;
  !!VRi^colmagiId^&i^colmagiId^>=15:S0;
!!en;


// Visiting for human players
!?OB(OBJ_ARENA)/1&1000;
!!OB998:S;                              [Disable Standart Logic]
!!PO998:N?(id:y);
!!HE(CURRENT_HERO):N?(hero:y);

// If object is already visited
!!if&i^colmagi_%(id)_%(hero)^;
  !!IF:M^%T(jsMod.advObject.4.1.visitedDlg)^;
  !!FU:E;
!!en;

// On visit
!!IF:Q1/33/2/34/2/(MSG_TYPE_CHOOSE_PIC_OR_CANCEL)^%T(jsMod.advObject.4.1.notVisitedDlg)^;

!!if&v1=1;
  !!HE(CURRENT_HERO):Fd/d/d2/d;
  !!VRi^colmagi_%(id)_%(hero)^:S(TRUE);
!!el&v1=2;
  !!HE(CURRENT_HERO):Fd/d/d/d2;
  !!VRi^colmagi_%(id)_%(hero)^:S(TRUE);
!!en;


// Visitng for AI
; Note: AI visits would still grant standard arena bonuses to them, but the bonuses would be removed upon end visiiting
!?OB(OBJ_ARENA)/1&-1000;
!!OB998:R;                              [Enable Arena feature]
!!PO998:N?(id:y);
!!HE(CURRENT_HERO):N?(hero:y);
!!HE(CURRENT_HERO):F?i^colmagi_atk^/?i^colmagi_def^/?(pwr:y)/?(knl:y); [store AI's attack and defense in order to restore any bonus from visiitng arena]
!!FU&i^colmagi_%(id)_%(hero)^:E;

; Give bonus to the lower between Power and Knowledge
!!if&(pwr)>(knl);
  !!HE(CURRENT_HERO):Fd/d/d/d2;
!!el;
  !!HE(CURRENT_HERO):Fd/d/d2/d;
!!en;

!!VRi^colmagi_%(id)_%(hero)^:S(TRUE);


!$OB(OBJ_ARENA)/1&-1000;
!!HE(CURRENT_HERO):Fi^colmagi_atk^/i^colmagi_def^/d/d; [restore AI bonus from visiting arena]
!!VRi^colmagi_atk^:S0;
!!VRi^colmagi_def^:S0;


// Hint
!?FU(OnAdvMapTileHint);
!#VA(x:x) (y:x) (z:x);             Object entrance coordinates
!#VA(objType:x) (objSubtype:x);    Type and subtype of object. For active hero it's object under hero.
!#VA(tileX:x) (tileY:x) (tileZ:x); Real tile coordinates.

; Exit if the location has been occupied by a hero
!!UN:P904/(TRUE) P905/(FALSE);
!!HE(x)/(y)/(z):E?(exp:y);
!!UN:P905/?(hasError:y);
!!UN:P904/(FALSE);

!!if&(hasError);
  !!UN:P905/(FALSE);
!!el;
  !!FU:E;
!!en;

!!FU|(objType)<>(OBJ_ARENA)/(objSubtype)<>1:E;

; Show hint when there is no active hero, no visiting status
!!OW:A(CURRENT_PLAYER)/?(hero:y);

!!if&(hero)=(NO_HERO);
  !!MM:M^%T(jsMod.advObject.4.1.name)^;
!!el;
  ; Show hint when any hero is active, set status
  !!SN:O?(x)/?(y)/?(z);
  !!PO(x)/(y)/(z):N?(id:y);

  !!if&i^colmagi_%(id)_%(hero)^;
    !!MM:M^%T(jsMod.advObject.4.1.name) %T(jsMod.advObject.common.visited)^;
  !!el;
    !!MM:M^%T(jsMod.advObject.4.1.name) %T(jsMod.advObject.common.notVisited)^;
  !!en;
!!en;


// Right-clicking dialogue
!?FU(OnAdventureMapRightMouseClick);
!!CM:P?(x:y)/?(y:y)/?(z:y);
!!OB(x)/(y)/(z):T?(objType:y) U?(objSubtype:y);
!!FU|(objType)<>(OBJ_ARENA)/(objSubtype)<>1:E;

; Exit if the location has been occupied by a hero
!!UN:P904/(TRUE) P905/(FALSE);
!!HE(x)/(y)/(z):E?(exp:y);
!!UN:P905/?(hasError:y);
!!UN:P904/(FALSE);

!!if&(hasError);
  !!UN:P905/(FALSE);
!!el;
  !!FU:E;
!!en;

; Disable standard action
!!CM:R0;

; Show RMB msg when there is no active hero, no visiting status
!!OW:A(CURRENT_PLAYER)/?(hero:y);

!!if&(hero)=(NO_HERO);
  !!IF:M0/(MSG_TYPE_POPUP)/^%T(jsMod.advObject.4.1.name)^;
!!el;
  ; Show RMB msg when any hero is active, set status
  !!SN:O?(x)/?(y)/?(z);
  !!PO(x)/(y)/(z):N?(id:y);

  !!if&i^colmagi_%(id)_%(hero)^;
    !!IF:M0/(MSG_TYPE_POPUP)/^%T(jsMod.advObject.4.1.name)%T(gem.endl)%T(gem.endl)%T(jsMod.advObject.common.visited)^;
  !!el;
    !!IF:M0/(MSG_TYPE_POPUP)/^%T(jsMod.advObject.4.1.name)%T(gem.endl)%T(gem.endl)%T(jsMod.advObject.common.notVisited)^;
  !!en;
!!en;

// compatibility with single visit bonus sites reset each month
!?FU(OnEveryDay)&i^timerOnce^/i^timerMonthDay^=1/i^timerDay^>1;
!!UN:P123/?(resetOn:y);
!!FU&(resetOn)<>(TRUE):E;

!!re (id:y)/0/15;
  !!re (hero:y)/(HERO_FIRST)/(HERO_LAST_WOG);
    !!VRi^colmagi_%(id)_%(hero)^:S(FALSE);
  !!en;
!!en;
